*** Sensitive Data Exposure
Раскрытие конфиденциальных данных 
	
	Все из front endрассмотренные нами компоненты взаимодействуют на стороне
	клиента. Поэтому если на них нападают, то они не представляют прямой угрозы
	для ядра back endвеб-приложения и обычно не приводит к необратимому
	повреждению. Однако, поскольку эти компоненты выполняются на client-side,
	они подвергают конечного пользователя опасности нападения и эксплуатации,
	если у него есть какие-либо уязвимости. Если уязвимость внешнего интерфейса
	используется для атаки на пользователей-администраторов, это может привести
	к несанкционированному доступу, доступу к конфиденциальным данным, нарушению
	работы службы и т. д.

	Хотя большая часть тестирования на проникновение веб-приложений
	сосредоточена на внутренних компонентах и их функциях, важно
	также тестировать внешние компоненты на наличие потенциальных уязвимостей,
	поскольку эти типы уязвимостей иногда могут использоваться для получения
	доступа к конфиденциальным функциям (т. е. панель администратора), что может
	привести к компрометации всего сервера.
	
	Под раскрытием конфиденциальных данных понимается доступность
	конфиденциальных данных в виде открытого текста для конечного пользователя
		
		https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure
	
	 Обычно это можно найти в source codeвеб-страницы или источника страницы во
	 внешнем интерфейсе веб-приложений. Это исходный HTML-код приложения, не
	 путать с внутренним кодом, который обычно доступен только на самом сервере.
	 Мы можем просмотреть исходный код страницы любого веб-сайта в нашем
	 браузере, щелкнув правой кнопкой мыши в любом месте страницы и выбрав View
	 Page Sourceиз всплывающего меню. Иногда разработчик может отключить щелчок
	 правой кнопкой мыши в веб-приложении, но это не мешает нам просматривать
	 исходный код страницы, поскольку мы можем просто ввести ctrl + uили
	 просмотреть исходный код страницы через веб-прокси, например Burp Suite.
	 Давайте посмотрим на исходный код страницы google.com. Щелкните правой
	 кнопкой мыши и выберите View Page Source, и в нашем браузере откроется
	 новая вкладка с URL-адресом view-source:https://www.google.com/. Здесь мы
	 можем увидеть HTML, JavaScriptи внешние ссылки. Найдите минутку, чтобы
	 просмотреть исходный код страницы.
	 	
		~~~___ LINK ___~~~ img/view_source1.png

	Иногда мы можем найти логин credentials, hashes, или другие конфиденциальные
	данные, скрытые в комментариях к исходному коду веб-страницы или во внешних
	JavaScriptкод импортируется. Другая конфиденциальная информация может
	включать в себя открытые ссылки или каталоги или даже открытую информацию о
	пользователе, и все это потенциально может быть использовано для расширения
	нашего доступа в веб-приложении или даже в поддерживающей инфраструктуре
	веб-приложения (веб-сервер, сервер базы данных и т. д.).

	По этой причине первое, что мы должны сделать при оценке веб-приложения, —
	это просмотреть исходный код его страницы, чтобы увидеть, можем ли мы
	определить какие-либо «легко висящие плоды», такие как открытые учетные
	данные или скрытые ссылки. 
		

	# Example
	Пример
		
		На первый взгляд, эта форма входа не выглядит чем-то из ряда вон
		выходящим:

		~~~___ LINK ___~~~ img/web_apps_login_form_.png

		Давайте посмотрим на исходный код страницы:
			
			<form action="action_page.php" method="post">

				<div class="container">
					<label for="uname"><b>Username</b></label>
					<input type="text" required>

					<label for="psw"><b>Password</b></label>
					<input type="password" required>

					<!-- TODO: remove test credentials test:test -->

					<button type="submit">Login</button>
				</div>
			</form>

			</html>

		Мы видим, что разработчики добавили некоторые комментарии, которые они
		забыли удалить, которые содержат тестовые учетные данные:
			
			<!-- TODO: remove test credentials test:test -->

		Комментарий, похоже, является напоминанием разработчикам об удалении
		тестовых учетных данных. Учитывая, что комментарий еще не удален, эти
		учетные данные могут оставаться действительными.

		Хотя учетные данные для входа в систему встречаются нечасто в
		комментариях разработчиков, мы все же можем найти различную
		конфиденциальную и ценную информацию при просмотре исходного кода, такую
		как тестовые страницы или каталоги, параметры отладки или скрытые
		функции. Существуют различные автоматизированные инструменты, которые мы
		можем использовать для сканирования и анализа доступного исходного кода
		страницы, чтобы определить потенциальные пути или каталоги и другую
		конфиденциальную информацию.

		Использование этих типов информации может дать нам дополнительный доступ
		к веб-приложению, что может помочь нам атаковать внутренние компоненты,
		чтобы получить контроль над сервером.



	### Prevention
	Профилактика
		
		В идеале внешний исходный код должен содержать только код, необходимый
		для запуска всех функций веб-приложений, без какого-либо дополнительного
		кода или комментариев, которые не нужны для правильной работы
		веб-приложения. Всегда важно просматривать код, который будет виден
		конечным пользователям через исходный код страницы, или запускать его с
		помощью инструментов для проверки раскрытой информации.

		Также важно классифицировать типы данных в исходном коде и применять
		контроль над тем, что может или не может быть представлено на стороне
		клиента. Разработчики также должны проверять код на стороне клиента,
		чтобы убедиться, что в нем не осталось ненужных комментариев или скрытых
		ссылок. Кроме того, разработчики интерфейса могут захотеть использовать
		JavaScriptупаковка кода или запутывание, чтобы уменьшить вероятность
		раскрытия конфиденциальных данных через JavaScript code. Эти методы
		могут помешать автоматическим инструментам найти эти типы данных.


-------
%%% TASK
-------

	TARGET IP: 144.126.192.49:30530
		
		1) CTRL + U # посмотреть исходный код страницы


		2) CTRL + F # поиск по словам на странице  
			
			@: admin
			
			FOUND string:
				
				<!-- TODO: remove test credentials admin:HiddenInPlainSight -->

		
	~~~~___ANSWER___~~~~ : HiddenInPlainSight


