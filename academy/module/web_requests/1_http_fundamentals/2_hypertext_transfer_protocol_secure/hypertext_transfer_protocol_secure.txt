*** Hypertext Transfer Protocol Secure (HTTPS)
Безопасный протокол передачи гипертекста (HTTPS)

	- В предыдущем разделе мы обсудили, как отправляются и обрабатываются 
	HTTP-запросы. Однако одним из существенных недостатков HTTP является то, 
	что все данные передаются в открытом виде. Это означает, что любой между 
	источником и получателем может выполнить атаку «Человек посередине» (MiTM) 
	для просмотра переданных данных.

	- Чтобы противостоять этой проблеме, протокол HTTPS (HTTP Secure) , в 
	котором все коммуникации передаются в зашифрованном формате, поэтому даже 
	если третья сторона перехватит запрос, она не сможет извлечь из него данные. 
	По этой причине HTTPS стал основной схемой для веб-сайтов в Интернете, а 
	HTTP постепенно упраздняется, и вскоре большинство веб-браузеров не позволят 
	посещать веб-сайты HTTP. 
		
		https://tools.ietf.org/html/rfc2660
	
	### HTTPS Overview
	Обзор HTTPS
		
		- Если мы изучим HTTP-запрос, мы увидим эффект отсутствия обеспечения 
		безопасной связи между веб-браузером и веб-приложением. Например, 
		следующее содержимое HTTP-запроса на вход:

			$$$~ img src = https_clear.png

		- Мы видим, что учетные данные для входа можно просмотреть в открытом виде. 
		Это позволит кому-либо в той же сети (например, общедоступной беспроводной сети) 
		перехватить запрос и повторно использовать учетные данные для злонамеренных целей. 

		Напротив, когда кто-то перехватывает и анализирует трафик HTTPS-запроса, 
		он увидит примерно следующее:
			
			$$$~ img src = https_google_enc.png

		- Как мы видим, данные передаются в виде единого зашифрованного потока, 
		из-за чего кому-либо очень сложно получить такую информацию, как учетные 
		данные или любые другие конфиденциальные данные.

		Веб-сайты, использующие протокол HTTPS, могут быть идентифицированы с 
		помощью https://в своем URL-адресе (например, https://www.google.com), 
		а также значок замка в адресной строке веб-браузера слева от URL-адреса:   
			
			$$$~ img src = https_google.png	

		- Итак, если мы посетим веб-сайт, использующий HTTPS, например Google, 
		весь трафик будет зашифрован. 

			... (ПРИМЕЧАНИЕ) Хотя данные, передаваемые по протоколу HTTPS, могут 
			быть зашифрованы, запрос может по-прежнему раскрывать посещенный 
			URL-адрес, если он связывался с DNS-сервером с открытым текстом. По 
			этой причине рекомендуется использовать зашифрованные DNS-серверы 
			(например, 8.8.8.8 или 1.2.3.4) или использовать службу VPN для 
			обеспечения надлежащего шифрования всего трафика.
 
	
	### HTTPS Flow
	HTTPS-поток 

		- Давайте посмотрим, как HTTPS работает на высоком уровне: 
			
			$$$~ img src = HTTPS_Flow.png

		- Если мы напечатаем http://вместо https://чтобы посетить веб-сайт, 
		использующий HTTPS, браузер пытается разрешить домен и перенаправляет 
		пользователя на веб-сервер, на котором размещен целевой веб-сайт. Запрос 
		отправляется в порт 80 во-первых, это незашифрованный протокол HTTP. 
		Сервер обнаруживает это и перенаправляет клиента на защищенный порт HTTPS.
		443 вместо. Это делается через 301 Moved Permanentlyкод ответа, который 
		мы обсудим в следующем разделе. 
		
		- Далее клиент (веб-браузер) отправляет пакет «client hello», сообщая 
		информацию о себе. После этого сервер отвечает «сервер привет», после 
		чего следует обмен ключами
			
			https://en.wikipedia.org/wiki/Key_exchange
		
		- Для обмена SSL-сертификатами. Клиент проверяет ключ/сертификат и 
		отправляет свой собственный. После этого инициируется зашифрованное 
		рукопожатие:
			
			https://www.cloudflare.com/learning/ssl/what-happens-in-a-tls-handshake

		- Чтобы подтвердить, что шифрование и передача 
		работают правильно. 

		- После успешного завершения рукопожатия продолжается обычная HTTP-связь, 
		которая после этого шифруется. Это очень общий обзор обмена ключами, 
		который выходит за рамки данного модуля

			... (ПРИМЕЧАНИЕ) В зависимости от обстоятельств злоумышленник может 
			выполнить атаку на более раннюю версию HTTP, которая понижает связь 
			HTTPS до HTTP, делая данные передаваемыми в виде открытого текста. 
			Это делается путем настройки прокси-сервера Man-In-The-Middle (MITM) 
			для передачи всего трафика через хост злоумышленника без ведома 
			пользователя. Однако большинство современных браузеров, серверов и 
			веб-приложений защищают от этой атаки.




	### cURL for HTTPS
	cURL для HTTPS

		
		- cURL должен автоматически обрабатывать все стандарты связи HTTPS и 
		выполнять безопасное рукопожатие, а затем автоматически шифровать и 
		расшифровывать данные. Однако, если мы когда-либо свяжемся с веб-сайтом 
		с недействительным или устаревшим SSL-сертификатом, то cURL по умолчанию 
		не продолжит связь для защиты от ранее упомянутых атак MITM: 
		
			@ curl https://inlanefreight.com 
				
				curl: (60) SSL certificate problem: Invalid certificate chain
				More details here: https://curl.haxx.se/docs/sslcerts.html
				...SNIP...

		- Современные веб-браузеры будут делать то же самое, предупреждая 
		пользователя о посещении веб-сайта с недействительным SSL-сертификатом.

		- Мы можем столкнуться с такой проблемой при тестировании локального 
		веб-приложения или веб-приложения, размещенного для практических целей, 
		поскольку в таких веб-приложениях может еще не быть реализован 
		действительный сертификат SSL. Чтобы пропустить проверку сертификата с 
		помощью cURL, мы можем использовать -k флаг:
			
			@ curl -k https://inlanefreight.com 
				
				<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"
				<html><head> 
				...SNIP...
