###
Common Vulnerabilities and Exposures (CVE)
Распространенные уязвимости и риски (CVE)

	### Open Vulnerability Assessment Language (OVAL)
	Открытый язык оценки уязвимостей (OVAL)

		- Открытый язык оценки уязвимостей (OVAL) 

			https://oval.mitre.org/

		— это общедоступный 
		международный стандарт информационной безопасности, используемый для 
		оценки и детализации текущего состояния и проблем системы. OVAL также 
		поддерживается Управлением по кибербезопасности и коммуникациям 
		Министерства внутренней безопасности США. OVAL предоставляет язык для 
		понимания атрибутов системы кодирования и различных репозиториев 
		контента, совместно используемых в сообществе безопасности. Репозиторий 
		OVAL содержит более 7000 определений для общего пользования. Кроме того,
		OVAL также используется Национальным институтом стандартов и технологий 
		США (NIST) Протоколом автоматизации содержимого безопасности (SCAP), 
		который объединяет идеи сообщества для автоматизации управления 
		уязвимостями, измерения и обеспечения соответствия систем требованиям 
		политик. 

		# OVAL Process
		ОВАЛЬНЫЙ процесс
			
			-  ... VulnerabilityAssessment_Diagram_05.png

			Цель языка OVAL состоит в том, чтобы во время процесса оценки была 
			трехступенчатая структура, состоящая из:
    			 
				 - Идентификация конфигураций системы для тестирования

    			 - Оценка текущего состояния системы

    			 - Раскрытие информации в отчете


			Информация может быть описана в различных типах состояний, 
			в том числе: 
				
				#Vulnerable
				
				#Non-compliant
				
				#Installed Asset
				
				#Patched. 
		
	### OVAL Definitions
	ОВАЛ Определения
		
		- Определения OVAL записываются в формате XML для обнаружения любых 
		программных уязвимостей, неправильных конфигураций, программ и 
		дополнительной системной информации, исключающей необходимость 
		эксплуатации системы. Имея возможность выявлять проблемы, не используя 
		их напрямую, организация может определить, какие системы в сети 
		нуждаются в исправлении.

		- Четыре основных класса определений OVAL состоят из: 
			
			# OVAL Vulnerability Definitions: Выявляет уязвимости системы.
			
			# OVAL Compliance Definitions: определяет, соответствуют ли текущие 
			конфигурации системы требованиям системной политики.

			# OVAL Inventory Definitions: Оценивает систему, чтобы увидеть, 
			присутствует ли конкретное программное обеспечение.

			# OVAL Patch Definitions: определяет, есть ли в системе 
			соответствующий патч

		- Кроме того, OVAL ID Formatсостоят из уникального формата, состоящего 
		из «овал: имя домена организации: тип идентификатора: значение 
		идентификатора». ID Typeмогут относиться к различным категориям, 
		включая: определение ( def), объект ( obj), штат ( ste), и переменная 
		( var). Примером уникального идентификатора может быть 
		oval:org.mitre.oval:obj:1116.

		Такие сканеры, как Nessus, могут использовать OVAL для настройки 
		шаблонов сканирования на соответствие требованиям безопасности. 
		
	
	 ### Common Vulnerabilities and Exposures (CVE)
	 Распространенные уязвимости и риски (CVE)

	 	- Common Vulnerabilities and Exposures (CVE) 
			https://cve.mitre.org/

		— это общедоступный 
		каталог проблем безопасности, спонсируемый Министерством внутренней 
		безопасности США (DHS). Каждая проблема безопасности имеет уникальный 
		идентификационный номер CVE, присвоенный Центром нумерации CVE (CNA). 
		Цель создания уникального идентификационного номера CVE — создать 
		стандартизацию уязвимости или воздействия, которое исследователь 
		идентифицирует. CVE состоит из критической информации об уязвимости или 
		незащищенности, включая описание и ссылки на проблему. Информация в CVE 
		позволяет ИТ-команде организации понять, насколько вредной может быть 
		проблема для их среды.

		В следующей таблице показано, как идентификатор CVE может быть присвоен 
		уязвимости. Любые уязвимости, которым присвоен CVE, должны устраняться 
		независимо друг от друга, затрагивать только одну кодовую базу и быть 
		подтверждены и задокументированы соответствующим поставщиком. 

	### Stages of Obtaining a CVE
	Этапы получения CVE
		- 

		# Stage 1: Identify if CVE is Required and Relevant
		Этап 1. Определите, является ли CVE обязательным и уместным
			
			- Определите, является ли обнаруженная проблема уязвимостью. По 
			словам группы CVE, «уязвимость в контексте программы CVE 
			определяется кодом, который может быть использован, что отрицательно 
			сказывается на конфиденциальности, целостности, доступности ИЛИ и 
			требует изменения кода, изменения спецификации или спецификации. 
			устаревание для смягчения или устранения». Кроме того, исследования 
			должны подтвердить, что в базе данных CVE уже нет идентификатора CVE

		# Stage 2: Reach Out to Affected Product Vendor
		Этап 2. Обратитесь к поставщику затронутого продукта 
			
			- Исследователь должен убедиться, что он добросовестно связался с 
			поставщиком напрямую. Исследователи могут обратиться 
			к документам  CVE о методах раскрытия информации: 

		https://cve.mitre.org/cve/researcher_reservation_guidelines#appendix#a

			для получения дополнительной информации.

		# Stage 3: Identify if Request Should Be For Vendor CNA or Third Party 
		CNA
		Этап 3. Определите, должен ли запрос быть для CNA поставщика или CNA 
		третьей стороны
			
			- Если компания является частью участвующих CNA, она может назначить 
			идентификатор CVE для одного из своих продуктов. 
			
			Если проблема связана с участвующим CNA, исследователи могут 
			связаться с соответствующей организацией CNA здесь:
				
				https://cve.mitre.org/cve/request_id.html
			
			Если поставщик не является участвующим CNA, исследователь должен 
			попытаться связаться с сторонним координатором поставщика. 

		
		# Stage 4: Requesting CVE ID Through CVE Web Form
		Этап 4: Запрос идентификатора CVE через веб-форму CVE
			
			- У команды CVE есть форма, которую можно заполнить онлайн здесь:
				https://cveform.mitre.org/

			если описанные выше методы не работают для запросов CVE. 

		# Stage 5: Confirmation of CVE Form
		Этап 5: Подтверждение формы CVE
			
			- После отправки веб-формы CVE, упомянутой на этапе 4, физическое 
			лицо получит электронное письмо с подтверждением. Команда CVE 
			свяжется с запрашивающей стороной, если потребуется какая-либо 
			дополнительная информация. 

		# Stage 6: Receival of CVE ID
		Этап 6: Получение CVE ID
			
			- После утверждения команда CVE уведомит запрашивающую сторону 
			идентификатора CVE, если уязвимость уязвимого продукта будет 
			подтверждена. Обратите внимание, что CVE ID на данном этапе еще не 
			является общедоступным. 

		# Stage 7: Public Disclosure of CVE ID
		Этап 7: Публичное раскрытие CVE ID 
			
			 - Идентификаторы CVE могут быть объявлены общественности, как 
			 только соответствующие поставщики и стороны узнают о проблеме, 
			 чтобы предотвратить дублирование идентификаторов CVE. Этот этап 
			 гарантирует, что все связанные стороны знают о проблеме до того, 
			 как она будет обнародована. 


		# Stage 8: Announcing the CVE
		Этап 8: Объявление CVE
			
			- Группа CVE просит исследователей, использующих несколько CVE, 
			убедиться, что каждая CVE указывает на разные уязвимости. 
			Дополнительную информацию можно найти здесь: 
				https://cve.mitre.org/cve/researcher_reservation_guidelines 

		# Stage 9: Providing Information to The CVE Team
		Этап 9: Предоставление информации команде CVE 
			
			- На этом этапе команда CVE просит исследователя предоставить 
			дополнительную информацию для использования в официальном списке 
			CVE на веб-сайте. 
			Национальная база данных уязвимостей США (NVD): 
				https://nvd.nist.gov/

			- также хранит эту информацию в своей базе данных в режиме онлайн. 

	### Responsible Disclosure
	Ответственное раскрытие информации

		- Исследователи и консультанты по безопасности постоянно обращаются к 
		базе данных CVE, поскольку она содержит тысячи уязвимостей, которые 
		можно  использовать для эксплуатации. Кроме того, бывают случаи, когда 
		люди могут столкнуться с проблемой, которую они никогда не видели в 
		дикой природе или никогда не раскрывали, копаясь в конкретном 
		программном обеспечении или программе.

		Ответственное раскрытие информации имеет важное значение в сообществе 
		безопасности, поскольку оно позволяет организации или исследователю 
		работать напрямую с поставщиком, который сначала предоставляет им 
		сведения о проблеме, чтобы убедиться, что исправление доступно до того, 
		как об уязвимости будет объявлено миру. Если проблема не раскрыта 
		поставщику со всей ответственностью, реальные субъекты угрозы могут 
		использовать проблемы в преступных целях, что также называется 
			
			# zero day
			
			# 0-day.

	### EXAMPLE
	Примеры
		
		# CVE-2020-5902: 
			https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-5902

		CVE-2020-5902 — это уязвимость удаленного выполнения кода без проверки 
		подлинности в пользовательском интерфейсе управления трафиком BIG-IP 
		(TMUI). Эту проблему можно использовать, когда TMUI доступен через порт 
		управления BIG-IP и приводит к полному захвату системы, поскольку 
		злоумышленник может выполнять код, редактировать файлы и включать или 
		отключать службы на удаленном хосте.


		# CVE-2021-34527
			https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-34527

		CVE-2021-34527 , также известная как PrintNightmare, представляет собой 
		уязвимость удаленного выполнения кода в службе диспетчера очереди 
		печати Windows. Службой диспетчера очереди печати Windows можно 
		злоупотреблять из-за того, что служба неправильно обрабатывает операции 
		с файлами привилегий. Проблема требует аутентификации пользователя, но 
		позволяет полностью перехватить управление системой с удаленного или 
		локального выполнения кода. Проблема чрезвычайно опасна, поскольку 
		позволяет злоумышленнику полностью контролировать домен, поскольку 
		использует серверы (включая контроллеры домена) и рабочие станции.
