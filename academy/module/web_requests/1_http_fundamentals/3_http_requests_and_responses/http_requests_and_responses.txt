*** HTTP Requests and Responses
HTTP-запросы и ответы
	
	- Связь HTTP в основном состоит из HTTP-запроса и HTTP-ответа. HTTP-запрос 
	делается клиентом (например, cURL/браузером) и обрабатывается сервером 
	(например, веб-сервером). Запросы содержат все детали, которые нам требуются 
	от сервера, включая ресурс (например, URL, путь, параметры), любые данные 
	запроса, заголовки или параметры, которые мы указываем, и многие другие 
	параметры, которые мы обсудим в этом модуле.

	- Как только сервер получает HTTP-запрос, он обрабатывает его и отвечает, 
	отправляя ответ HTTP, который содержит код ответа, как описано в следующем 
	разделе, и может содержать данные ресурса, если запрашивающая сторона имела 
	к нему доступ. 

	### HTTP Request
	HTTP-запрос

		- Начнем с изучения следующего примера HTTP-запроса: 
			
			$$$~ img src = raw_request.png

		- На изображении выше показан HTTP-запрос GET к URL-адресу: 
			
			http://inlanefreight.com/users/login.html

		- Первая строка любого HTTP-запроса содержит три основных поля, 
		разделенных пробелами:
			
			Method		GET				HTTP-метод или глагол, указывающий тип 
										выполняемого действия. 			

			Path		/users			Путь к ресурсу, к которому осуществляется доступ. 
						/login.html		Это поле также может иметь суффикс строки запроса 
										(например, ?username=user).
						

			Version		HTTP/1.1		Третье и последнее поле используется для
										обозначения версии HTTP.

		- Следующий набор строк содержит пары значений заголовка HTTP, например 
		Host, User-Agent, Cookieи многие другие возможные заголовки. Эти 
		заголовки используются для указания различных атрибутов запроса. 
		Заголовки заканчиваются новой строкой, которая необходима серверу для 
		проверки запроса. Наконец, запрос может заканчиваться телом запроса и 
		данными.
			
			...(ПРИМЕЧАНИЕ) HTTP версии 1.X отправляет запросы в виде открытого 
			текста и использует символ новой строки для разделения разных полей 
			и разных запросов. HTTP версии 2.X, с другой стороны, отправляет 
			запросы в виде двоичных данных в форме словаря.



	### HTTP Response
	HTTP-ответ
		
		- Как только сервер обрабатывает наш запрос, он отправляет свой ответ. 
		Ниже приведен пример HTTP-ответа:

			$$$~ img src = raw_response.png

		- Первая строка ответа HTTP содержит два поля, разделенных пробелами. 
		Первый из них HTTP version(например HTTP/1.1), а второй обозначает HTTP 
		response code(например 200 OK). 
		
		- Коды ответов используются для определения статуса запроса, что будет 
		обсуждаться в следующем разделе. После первой строки в ответе перечислены 
		его заголовки, как в HTTP-запросе. Заголовки запроса и ответа обсуждаются 
		в следующем разделе.  

		- Наконец, ответ может заканчиваться телом ответа, которое отделяется 
		новой строкой после заголовков. Тело ответа обычно определяется как 
		HTMLкод. Однако он также может отвечать другими типами кода, такими как 
		JSON, ресурсы веб-сайта, такие как изображения, таблицы стилей или 
		сценарии, или даже документ, например PDF-документ, размещенный на 
		веб-сервере. 

	### cURL
		
		- В наших предыдущих примерах с cURL мы указывали только URL-адрес и в 
		ответ получали тело ответа. Однако cURL также позволяет нам предварительно 
		просмотреть полный HTTP-запрос и полный HTTP-ответ, что может оказаться 
		очень удобным при выполнении тестов на проникновение в Интернет или 
		написании эксплойтов. Чтобы просмотреть полный HTTP-запрос и ответ, мы 
		можем просто добавить -v verbose к нашим более ранним командам, и он 
		должен печатать как запрос, так и ответ:
			
			@ curl inlanefreight.com -v 

				>GET / HTTP/1.1
				Host: inlanefreight.com

				<HTTP/1.1 401 Unauthorized
				<Server: Apache/X.Y.ZZ (Ubuntu)

		- Как мы видим, на этот раз мы получаем полный HTTP-запрос и ответ. 
		Запрос просто отправлен GET / HTTP/1.1вместе с Host, User-Agentа также 
		Accept заголовки. В ответ HTTP-ответ содержал HTTP/1.1 401 Unauthorized, 
		что указывает на то, что у нас нет доступа к запрошенному ресурсу, как 
		мы увидим в следующем разделе. Как и в запросе, ответ также содержал 
		несколько заголовков, отправленных сервером, в том числе Date, 
		Content-Length, а также Content-Type. Наконец, ответ содержал тело ответа 
		в HTML, то же самое, что мы получили ранее при использовании cURL без 
		-v флаг. 	
		
		- Упражнение : -vvv flag показывает еще более подробный вывод. Попробуйте 
		использовать этот флаг, чтобы увидеть, какие дополнительные сведения о 
		запросе и ответе отображаются вместе с ним

	### Browser DevTools
	Браузер DevTools
		
	
		- Большинство современных веб-браузеров поставляются со встроенными 
		инструментами разработчика ( DevTools), которые в основном предназначены 
		для разработчиков для тестирования своих веб-приложений. Тем не менее, 
		как тестерам веб-проникновения, эти инструменты могут быть жизненно 
		важным активом в любой веб-оценке, которую мы проводим, поскольку 
		браузер (и его DevTools) являются одними из активов, которые мы, скорее 
		всего, будем иметь в каждом веб-оценке. В этом модуле мы также обсудим, 
		как использовать некоторые из основных инструментов разработки браузера 
		для оценки и мониторинга различных типов веб-запросов. 

		- Всякий раз, когда мы посещаем какой-либо веб-сайт или обращаемся к 
		любому веб-приложению, наш браузер отправляет несколько веб-запросов и 
		обрабатывает несколько ответов HTTP, чтобы отобразить окончательный вид, 
		который мы видим в окне браузера. Чтобы открыть инструменты разработчика 
		браузера в Chrome или Firefox, мы можем нажать [ CTRL+SHIFT+I] или просто 
		нажмите [ F12]. Инструменты разработчика содержат несколько вкладок, 
		каждая из которых используется по-своему. В основном мы сосредоточимся 
		на Networkвкладка в этом модуле, так как она отвечает за веб-запросы.

		- Если мы щелкнем вкладку «Network» и обновим страницу, мы сможем увидеть 
		список запросов, отправленных страницей: 

			$$$~ img src = devtools_network_requests.jpg 

		- Как мы видим, инструменты разработки сразу показывают нам статус 
		ответа (то есть код ответа), используемый метод запроса ( GET), 
		запрошенный ресурс (например, URL/домен) вместе с запрошенным путем. 
		Кроме того, мы можем использовать Filter URLsдля поиска определенного 
		запроса, если веб-сайт загружает слишком много запросов. 

		- Упражнение: попробуйте щелкнуть любой из запросов, чтобы просмотреть 
		сведения о них. Затем вы можете нажать на Response вкладку, чтобы 
		просмотреть текст ответа, а затем нажмите кнопку Raw кнопку, чтобы 
		просмотреть необработанный (необработанный) исходный код тела ответа.


QUESTIONS
	
	TARGET: 134.209.23.234:31290
	
 	TASK: FIND VERSION APACHE

		curl 134.209.23.234:31290 -v
			
			*   Trying 134.209.23.234:31290...
			* Connected to 134.209.23.234 (134.209.23.234) port 31290 (#0)
			> GET / HTTP/1.1
			> Host: 134.209.23.234:31290
			> User-Agent: curl/7.86.0
			> Accept: */*
			>
			* Mark bundle as not supporting multiuse
			< HTTP/1.1 200 OK
			< Date: Wed, 21 Dec 2022 21:55:08 GMT
			< Server: Apache/2.4.41 (Ubuntu)
			< Vary: Accept-Encoding
			< Content-Length: 348
			< Content-Type: text/html; charset=UTF-8
			<
			...SNIP...
	
		
+++++++++++ < Server: Apache/2.4.41 (Ubuntu) +++++++++++++++


	

