*** POST
ПОЧТА 

	### Login Forms
	Формы входа
		
		- В предыдущем разделе мы видели, как GETзапросы могут использоваться 
		веб-приложениями для таких функций, как поиск и доступ к страницам. 
		Однако всякий раз, когда веб-приложениям необходимо передавать файлы или 
		перемещать пользовательские параметры из URL-адреса, они используют 
		POSTЗ апросы.

		- В отличие от HTTP GET, который помещает пользовательские параметры в 
		URL, HTTP POST помещает пользовательские параметры в тело HTTP-запроса. 
		Это имеет три основных преимущества 
			

  			*  Lack of Logging: поскольку запросы POST могут передавать большие 
			файлы (например, загрузка файлов), для сервера было бы неэффективно 
			регистрировать все загруженные файлы как часть запрошенного URL-адреса, 
			как в случае с файлом, загруженным через запрос GET.
    
			* Less Encoding Requirements: URL-адреса предназначены для совместного 
			использования, что означает, что они должны соответствовать символам,
			которые можно преобразовать в буквы. Запрос POST помещает данные в 
			тело, которое может принимать двоичные данные. Кодировать нужно 
			только те символы, которые используются для разделения параметров.

    		* More data can be sent: максимальная длина URL-адреса зависит от 
			браузера (Chrome/Firefox/IE), веб-сервера (IIS, Apache, nginx), сети 
			доставки контента (Fastly, Cloudfront, Cloudflare) и даже средства 
			сокращения URL-адресов (bit.ly, amzn.to). . Вообще говоря, длина 
			URL-адреса не должна превышать 2000 символов, поэтому он не может 
			обрабатывать большой объем данных.

		- Итак, давайте посмотрим на несколько примеров того, как работают запросы 
		POST и как мы можем использовать такие инструменты, как cURL или 
		инструменты разработки браузера, для чтения и отправки запросов POST. 

	### Authenticated Cookies
	Аутентифицированные файлы cookie
		
		- Упражнение в конце этого раздела похоже на пример, который мы видели в 
		разделе GET. Однако, когда мы посещаем веб-приложение, мы видим, что оно 
		использует форму входа PHP вместо базовой аутентификации HTTP: 				
			
			$$$~ web_requests_post_login.jpg

		- Если мы попытаемся войти с помощью admin: admin, мы заходим и видим 
		функцию поиска, похожую на ту, что мы видели ранее в разделе GET: 
			
			$$$~ web_requests_login_search.jpg


		- Если мы очистим вкладку «Сеть» в инструментах разработки нашего браузера 
		и попытаемся снова войти в систему, мы увидим много отправленных запросов. 
		Мы можем фильтровать запросы по IP-адресу нашего сервера, чтобы 
		отображались только запросы, идущие на веб-сервер веб-приложения (т. е. 
		отфильтровывать внешние запросы), и мы заметим отправку следующего POST-запроса:  
			
			$$$~ web_requests_login_request.jpg

		- Мы можем нажать на запрос, нажать на кнопку Request вкладку (которая 
		показывает тело запроса), а затем нажмите кнопку Rawкнопку, чтобы 
		отобразить необработанные данные запроса. Мы видим, что в качестве данных 
		POST-запроса отправляются следующие данные: 
			
			username=admin&password=admin

		- Имея под рукой данные запроса, мы можем попытаться отправить аналогичный 
		запрос с помощью cURL, чтобы посмотреть, позволит ли это нам также войти 
		в систему. Кроме того, как и в предыдущем разделе, мы можем просто 
		щелкнуть запрос правой кнопкой мыши и выбрать Copy>Copy as cURL. Однако 
		важно уметь создавать POST-запросы вручную, поэтому давайте попробуем 
		это сделать. 			
			
			Network CTRL + SHIFT + I 

			POST http://143.110.164.90:30702/
			
				-> Copy Value -> Copy as cURL
					
					curl 'http://143.110.164.90:30702/' -X POST -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:108.0) Gecko/20100101 Firefox/108.0' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8' -H 'Accept-Language: en-US,en;q=0.5' -H 'Accept-Encoding: gzip, deflate' -H 'Referer: http://143.110.164.90:30702/' -H 'Content-Type: application/x-www-form-urlencoded' -H 'Origin: http://143.110.164.90:30702' -H 'Connection: keep-alive' -H 'Cookie: PHPSESSID=thcin0dvelhp1i71gkfjlb3ifr' -H 'Upgrade-Insecure-Requests: 1' --data-raw 'username=admin&password=admin'
			
		- Мы будем использовать -X POST флаг для отправки POST запрос. Затем, 
		чтобы добавить наши данные POST, мы можем использовать -d флаг и добавьте 
		вышеуказанные данные после него, как показано ниже:
			
			curl -X POST -d 'username=admin&password=admin' http://<SERVER_IP>:<PORT>/

			...SNIP...
				 <em>Type a city name and hit <strong>Enter</strong></em>
			...SNIP...

		- Если мы изучим HTML-код, мы не увидим код формы входа, но увидим код 
		функции поиска, что указывает на то, что мы действительно прошли 
		аутентификацию. 
			
			... Совет: многие формы входа перенаправляют нас на другую страницу 
			после аутентификации (например, /dashboard.php). Если мы хотим 
			следовать перенаправлению с помощью cURL, мы можем использовать -L 
			флаг.

	### Аутентифицированные файлы cookie 
		
		- Если мы успешно прошли аутентификацию, мы должны были получить файл 
		cookie, чтобы наши браузеры могли сохранить нашу аутентификацию, и нам 
		не нужно входить в систему каждый раз, когда мы посещаем страницу. Мы 
		можем использовать -v или же -i флаги для просмотра ответа, который должен 
		содержать Set-Cookieзаголовок с нашим аутентифицированным файлом cookie: 
			
			curl -X POST -d 'username=admin&password=admin' http://<SERVER_IP>:<PORT>/ -i
				
				HTTP/1.1 200 OK
				Set-Cookie: PHPSESSID=c1nsa6op7vtk7kdis7bcnbadf1; path=/
				...SNIP...
					 <em>Type a city name and hit <strong>Enter</strong></em>
				...SNIP...

		- С нашим аутентифицированным файлом cookie теперь мы должны иметь 
		возможность взаимодействовать с веб-приложением без необходимости каждый 
		раз вводить свои учетные данные. Чтобы проверить это, мы можем установить 
		указанный выше файл cookie с помощью -b флаг в cURL следующим образом: 
			
			curl -b 'PHPSESSID=c1nsa6op7vtk7kdis7bcnbadf1' http://<SERVER_IP>:<PORT>/

			...SNIP...
				 <em>Type a city name and hit <strong>Enter</strong></em>
			...SNIP...

		- Как видим, мы действительно прошли аутентификацию и попали в функцию 
		поиска. Также возможно указать файл cookie в качестве заголовка следующим 
		образом:
			
			curl -H 'Cookie: PHPSESSID=c1nsa6op7vtk7kdis7bcnbadf1' http://<SERVER_IP>:<PORT>/

		- Мы также можем попробовать то же самое с нашими браузерами. Давайте 
		сначала выйдем из системы, а затем вернемся на страницу входа. Затем мы 
		можем перейти к Storageвкладка в devtools с [ SHIFT+F9]. в Storageвкладку, 
		мы можем нажать на Cookiesна левой панели и выберите наш веб-сайт, чтобы 
		просмотреть наши текущие файлы cookie. У нас могут быть или не быть 
		существующие файлы cookie, но если мы вышли из системы, то наш файл cookie 
		PHP не должен быть аутентифицирован, поэтому, если мы получим форму входа, 
		а не функцию поиска: 
			
			$$$~ web_requests_cookies.jpg

		- Теперь давайте попробуем использовать наш ранее аутентифицированный 
		файл cookie и посмотрим, сможем ли мы войти без необходимости предоставлять 
		свои учетные данные. Для этого мы можем просто заменить значение cookie 
		на свое собственное. В противном случае мы можем щелкнуть правой кнопкой 
		мыши файл cookie и выбрать Delete All, и щелчок на +значок, чтобы добавить 
		новый файл cookie. После этого нам нужно ввести имя файла cookie, которое 
		является частью перед =( PHPSESSID), а затем значение файла cookie, которое 
		является частью после =( c1nsa6op7vtk7kdis7bcnbadf1). Затем, как только 
		наш файл cookie установлен, мы можем обновить страницу и увидеть, что мы 
		действительно прошли аутентификацию без необходимости входа в систему, 
		просто используя аутентифицированный файл cookie: 

			$$$~ web_requests_auth_cookie.jpg
			
		- Как мы видим, действительного файла cookie может быть достаточно для 
		аутентификации во многих веб-приложениях. Это может быть неотъемлемой 
		частью некоторых веб-атак, таких как межсайтовый скриптинг. 

	### JSON Data
	JSON-данные
		
		- Наконец, давайте посмотрим, какие запросы отправляются, когда мы 
		взаимодействуем с City Searchфункция. Для этого мы перейдем на вкладку 
		«Сеть» в инструментах разработки браузера, а затем щелкнем значок корзины, 
		чтобы очистить все запросы. Затем мы можем сделать любой поисковый запрос, 
		чтобы увидеть, какие запросы отправляются: 
			
			$$$~ web_requests_search_request.jpg

		- Как мы видим, форма поиска отправляет POST-запрос на search.php, со 
		следующими данными: 
			
			{"search":"london"}

		- Данные POST представлены в формате JSON, поэтому в нашем запросе должен 
		быть указан Content-Typeзаголовок будет application/json. Мы можем 
		подтвердить это, щелкнув правой кнопкой мыши запрос и выбрав Copy>Copy 
		Request Headers:
			
			POST /search.php HTTP/1.1
			Content-Type: application/json
			Origin: http://server_ip
			Cookie: PHPSESSID=c1nsa6op7vtk7kdis7bcnbadf1

		- Действительно, у нас есть Content-Type: application/json. Давайте 
		попробуем воспроизвести этот запрос, как мы делали ранее, но включив 
		заголовки cookie и content-type, и отправим наш запрос на search.php: 

			curl -X POST -d '{"search":"london"}' -b 'PHPSESSID=c1nsa6op7vtk7kdis7bcnbadf1' 
			-H 'Content-Type: application/json' http://<SERVER_IP>:<PORT>/search.php

				["London (UK)"]

		- Как мы видим, мы смогли взаимодействовать с функцией поиска напрямую, 
		без необходимости входа в систему или взаимодействия с интерфейсом 
		веб-приложения. Это может быть важным навыком при оценке веб-приложений 
		или упражнениях по поиску ошибок, поскольку таким образом гораздо быстрее 
		тестировать веб-приложения. 

			... Упражнение. Попробуйте повторить приведенный выше запрос, не 
			добавляя заголовки cookie или типа контента, и посмотрите, как 
			веб-приложение будет действовать по-другому.

		- Наконец, давайте попробуем повторить тот же запрос выше, используя 
		Fetch, как мы это делали в предыдущем разделе. Мы можем щелкнуть правой 
		кнопкой мыши запрос и выбрать Copy>Copy as Fetch, а затем перейти к 
		Console tab и выполняем там наш код: 

			$$$~ web_requests_fetch_post.jpg

		- Наш запрос успешно возвращает те же данные, которые мы получили с 
		помощью cURL. Try to search for different cities by directly interacting 
		with the search.php through Fetch or cURL.


	### QUEST 
		
		HOST 157.245.46.136:32113
			
			AUTH IN WEB PAGE with login and pass
				
				admin:admin

		NETWORK LIST REQUESTS
			
			POST HOST /

				200 OK

			REQUEST 
			
				Form data 
					
					username "admin"
					password "admin"

					RAW: username=admin&password=admin

		
		CURL
			
			curl -X POST -d 'username=admin&password=admin' 157.245.46.136:32113/ -i

			 	HTTP/1.1 200 OK
				Set-Cookie: PHPSESSID=ghlbpf6ioldeo16of21jbaui2c; path=/

			curl -b 'PHPSESSID=ghlbpf6ioldeo16of21jbaui2c' 157.245.46.136:32113
				
			 	<em>Type a city name and hit <strong>Enter</strong></em>

			OR

			curl -H 'Cookie: PHPSESSID=ghlbpf6ioldeo16of21jbaui2c' 157.245.46.136:32113	

			
			curl -X POST -d '{"search":"flag"}' -b 'PHPSESSID=ghlbpf6ioldeo16of21jbaui2c' -H 'Content-Type: application/json' http://157.245.46.136:32113/search.php
				
				["flag: HTB{p0$t_r3p34t3r}"]
