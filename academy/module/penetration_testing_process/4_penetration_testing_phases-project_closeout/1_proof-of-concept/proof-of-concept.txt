*** Proof-of-Concept
Доказательство концепции
	
	- Proof of Concept( PoC) или же Proof of Principleтермин управления проектами.
	В управлении проектами это служит доказательством того, что проект в
	принципе осуществим. Критерии для этого могут заключаться в технических или
	деловых факторах. Следовательно, это основа для дальнейшей работы, в нашем
	случае необходимых шагов по обеспечению безопасности корпоративной сети
	путем подтверждения обнаруженных уязвимостей. Иными словами, он служит
	основой для принятия решения о дальнейшем образе действий. В то же время он
	позволяет выявлять и минимизировать риски.
		
		~~~___ LINK ___~~~ 0-PT-Process-POC.png

	- Этот этап проекта часто интегрируется в процесс разработки нового
	прикладного программного обеспечения (прототипирование) или решений в
	области ИТ-безопасности. Для нас в информационной безопасности это то, где
	мы доказываем уязвимости в операционных системах или прикладном программном
	обеспечении. Мы используем этот PoC, чтобы доказать, что проблема
	безопасности существует, чтобы разработчики или администраторы могли
	проверить ее, воспроизвести, увидеть влияние и протестировать свои усилия по
	исправлению. Одним из наиболее распространенных примеров, используемых для
	доказательства уязвимости программного обеспечения, является выполнение
	калькулятора (calc.exe в Windows) в целевой системе. В принципе PoC также
	оценивает вероятность успешного доступа к системе из фактического
	использования.

	А PoCможет иметь множество различных представлений. Например,
	documentationобнаруженных уязвимостей также могут составлять PoC. Более
	практичная версия PoC — это scriptили же codeкоторый автоматически
	эксплуатирует найденные уязвимости. Это демонстрирует безупречное
	использование уязвимостей. Этот вариант удобен для администратора или
	разработчика, потому что они могут видеть, какие шаги предпринимает наш
	скрипт для эксплуатации уязвимости.

	Тем не менее, есть один существенный недостаток, который имеет место время
	от времени. После того, как администраторы и разработчики получили от нас
	такой скрипт, им легко «бороться» с нашим скриптом. Они сосредоточены на
	изменении систем, чтобы созданный нами сценарий больше не работал. Важно то,
	что сценарий только one wayиспользования данной уязвимости. Следовательно,
	работа против нашего скрипта, а не вместе с ним, а также модификация и
	защита систем, чтобы наш скрипт больше не работал, не означает, что
	информацию, полученную из скрипта, нельзя получить другим способом. Это
	важный аспект, который следует обсудить с администраторами и разработчиками
	и прямо упомянуть и указать.

	Отчет, который они получают от нас, должен помочь им увидеть полную картину,
	сосредоточиться на более широких проблемах и дать четкие рекомендации по
	исправлению. Включение пошагового руководства по цепочке атак в случае
	компрометации домена во время внутренней проверки — отличный способ
	показать, как можно объединить несколько недостатков и как исправление
	одного недостатка нарушит цепочку, но другие недостатки все еще будут
	существовать. Если они также не исправлены, может быть другой путь, чтобы
	добраться до точки, где цепочка атак была исправлена, и продолжить движение
	вперед. Мы также должны обратить внимание на этот момент во время нашего
	совещания по рассмотрению отчета.

	Например, если пользователь использует пароль Password123, основной
	уязвимостью является не пароль, а password policy. Если обнаружится, что
	администратор домена использует этот пароль, и он будет изменен, эта учетная
	запись теперь будет иметь более надежный пароль, но проблема слабых паролей,
	вероятно, по-прежнему будет характерна для всей организации.

	Если бы политика паролей соответствовала высоким стандартам, пользователь не
	смог бы использовать такой слабый пароль. Администраторы и разработчики
	несут ответственность за функциональность и качество своих систем и
	приложений. Кроме того, высокое качество означает высокие стандарты, которые
	мы должны подчеркивать в наших рекомендациях по восстановлению. 


