*** COMMON TERMS 
Общие условия 
	
	- Тестирование на проникновение/взлом — огромная область. Мы столкнемся с
	бесчисленным количеством технологий на протяжении всей нашей карьеры. Вот
	некоторые из наиболее распространенных терминов и технологий, с которыми мы
	будем сталкиваться неоднократно и которые должны иметь четкое представление.
	Это не исчерпывающий список, но его достаточно, чтобы начать работу с
	основными модулями и простыми блоками HTB.
	
	### What is a Shell?
	Что такое Шелл?
		
		Shellэто очень распространенный термин, который мы будем слышать снова и
		снова во время нашего путешествия. Он имеет несколько значений. В
		системе Linux оболочка представляет собой программу, которая получает
		ввод от пользователя с помощью клавиатуры и передает эти команды
		операционной системе для выполнения определенной функции. На заре
		вычислительной техники оболочка была единственным доступным интерфейсом
		для взаимодействия с системами. С тех пор появилось много других типов и
		версий операционных систем, а также графический пользовательский
		интерфейс (GUI) в дополнение к интерфейсам командной строки (оболочке),
		таким как терминал Linux, командная строка Windows (cmd.exe) и Windows
		PowerShell. .

		Большинство систем Linux используют программу под названием Bash (Bourne
		Again Shell) в качестве программы-оболочки для взаимодействия с
		операционной системой.
			
			https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html

		Bash — это расширенная версия sh , 
			
			https://man7.org/linux/man-pages/man1/sh.1p.html 
		
		исходной программы-оболочки Unix. Помимо bashесть и другие оболочки, 
		включая Zsh , Tcsh , Ksh , Fish shell и т. д., но не ограничиваясь ими.
			
			https://en.wikipedia.org/wiki/Z_shell
			https://en.wikipedia.org/wiki/Tcsh
			https://en.wikipedia.org/wiki/KornShell
			https://en.wikipedia.org/wiki/Fish_(Unix_shell)

		Мы часто читаем или слышим, как другие говорят о «получении оболочки» на
		коробке (системе). Это означает, что целевой хост был взломан, и мы
		получили доступ на уровне оболочки (обычно bashили же sh) и может
		запускать команды в интерактивном режиме, как если бы мы вошли в систему
		на хосте. Оболочку можно получить, воспользовавшись уязвимостью
		веб-приложения или сети/службы, либо получив учетные данные и удаленно
		войдя на целевой хост. Существует три основных типа соединений оболочки: 
			
		Reverse shell 	Инициирует обратное соединение с «слушателем» на нашем
		
		~ блоке атаки.

		Bind shell 		«Привязывается» к определенному порту на целевом хосте и
		
		~ ждет подключения от нашего атакующего блока.

		Web shell 		Выполняет команды операционной системы через
		
		~ веб-браузер, обычно не интерактивный или полуинтерактивный. Его также
		можно использовать для запуска отдельных команд (например, для
		использования уязвимости загрузки файлов и загрузки PHPскрипт для
		запуска одной команды.

		У каждого типа оболочки есть свой вариант использования, и так же, как
		существует много способов получить оболочку, вспомогательная программа,
		которую мы используем для получения оболочки, может быть написана на
		многих языках ( Python, Perl, Go, Bash, Java, awk, PHP, так далее.). Это
		могут быть небольшие скрипты или более крупные и сложные программы для
		облегчения соединения целевого хоста с нашей атакующей системой и
		получения доступа к «оболочке». Доступ к командной оболочке будет
		подробно рассмотрен в следующем разделе. 

	### What is a Port?
	Что такое порт? 
		
		https://en.wikipedia.org/wiki/Port_(computer_networking

		
		Порт можно рассматривать как окно или дверь в доме (дом является
		удаленной системой), если окно или дверь оставлены открытыми или не
		заперты должным образом, мы часто можем получить несанкционированный
		доступ к дому Это похоже на вычисления. Порты — это виртуальные точки, в
		которых начинаются и заканчиваются сетевые соединения. Они основаны на
		программном обеспечении и управляются основной операционной системой.
		Порты связаны с определенным процессом или службой и позволяют
		компьютерам различать разные типы трафика (трафик SSH направляется на
		порт, отличный от веб-запросов на доступ к веб-сайту, даже если запросы
		на доступ отправляются через одно и то же сетевое соединение).

		Каждому порту присваивается номер, и многие из них стандартизированы для
		всех устройств, подключенных к сети (хотя службу можно настроить для
		работы на нестандартном порту). Например, HTTPсообщения (трафик
		веб-сайта) обычно идут на порт 80, пока HTTPSсообщения идут в порт
		443если не настроено иначе. Мы столкнемся с веб-приложениями,
		работающими на нестандартных портах, но обычно находим их на портах 80 и
		443. Номера портов позволяют нам получить доступ к определенным службам
		или приложениям, работающим на целевых устройствах. На очень высоком
		уровне порты помогают компьютерам понять, как обрабатывать различные
		типы данных, которые они получают.

		Существует две категории портов: 

			# протокол управления передачей (TCP)
				
				https://en.wikipedia.org/wiki/Transmission_Control_Protocol				

			# протокол пользовательских дейтаграмм (UDP) .
				
				https://en.wikipedia.org/wiki/User_Datagram_Protocol				

		TCPориентирован на соединение, что означает, что соединение между
		клиентом и сервером должно быть установлено перед отправкой данных.
		Сервер должен находиться в состоянии прослушивания, ожидая запросов на
		подключение от клиентов. UDPиспользует модель связи без установления
		соединения. Нет "рукопожатия" и, следовательно, вносит некоторую
		ненадежность, поскольку нет гарантии доставки данных. UDPполезно, когда
		исправление/проверка ошибок либо не нужны, либо выполняются самим
		приложением. UDPподходит для приложений, которые выполняют срочные
		задачи, поскольку отбрасывание пакетов происходит быстрее, чем ожидание
		задержанных пакетов из-за повторной передачи, как в случае с TCPи может
		существенно повлиять на систему реального времени. Есть 65,535 TCPпорты
		и 65,535другой UDPпорты, каждый из которых обозначается номером.
		Некоторые из самых известных TCPа также UDPпорты перечислены ниже:
			
			20/21(TCP) 			FTP
			22(TCP) 			SSH
			23(TCP) 			Telnet
			25(TCP) 			SMTP
			80(TCP) 			HTTP
			161(TCP/UDP) 		SNMP
			389(TCP/UDP) 		LDAP
			443(TCP) 			SSL/ TLS( HTTPS)
			445(TCP) 			SMB
			3389(TCP) 			RDP
		
		Как профессионалы в области информационной безопасности, мы должны уметь
		быстро вспоминать большие объемы информации по самым разным темам. Для
		нас, особенно для пентестеров, важно иметь четкое представление о многих
		TCPа также UDPпорты и иметь возможность быстро распознавать их только по
		их номеру (т. е. знать, что порт 21является FTP, порт 80является HTTP,
		порт 88является Kerberos) без необходимости искать его. Это придет с
		практикой и повторением и в конечном итоге станет нашей второй натурой,
		поскольку мы атакуем больше ящиков, лабораторий и реальных сетей и
		помогаем нам работать более эффективно и лучше расставлять приоритеты в
		наших усилиях по подсчету и атаках.

		Такие руководства, как:
			
			https://web.mit.edu/rhel-doc/4/RH-DOCS/rhel-sg-en-4/ch-ports.html

			https://packetlife.net/media/library/23/common-ports.pdf
			

		Являются отличными ресурсами для изучения стандартных и менее
		распространенных портов TCP и UDP. Поставьте перед собой задачу
		запомнить как можно больше из них и проведите небольшое исследование
		каждого из протоколов, перечисленных в таблице выше. Это отличная ссылка
		на топ 1000 TCPа также UDPпорты из nmapвместе с 100 топовыми сервисами,
		просканированными nmap. 		
			
			https://nullsec.us/top-1-000-tcp-and-udp-ports-nmap-default/


	### What is a Web Server
	Что такое веб-сервер
		
		Веб-сервер — это приложение, работающее на внутреннем сервере, которое
		обрабатывает все HTTPтрафик из браузера на стороне клиента, направляет
		его на страницы назначения запросов и, наконец, отвечает браузеру на
		стороне клиента. Веб-серверы обычно работают на TCP-портах. 80или же
		443, и отвечают за подключение конечных пользователей к различным частям
		веб-приложения, а также за обработку их различных ответов:
			
		Поскольку веб-приложения, как правило, открыты для публичного
		взаимодействия и выходят в Интернет, они могут привести к компрометации
		внутреннего сервера, если они страдают от каких-либо уязвимостей.
		Веб-приложения могут предоставлять обширную поверхность для атак, что
		делает их важной целью для злоумышленников и пентестеров.

		Многие типы уязвимостей могут повлиять на веб-приложения. Мы часто будем
		слышать/видеть ссылки на Топ-10 OWASP. 
			
			https://owasp.org/www-project-top-ten/


		Это стандартизированный список из 10 основных уязвимостей
		веб-приложений, поддерживаемый Open Web Application Security Project
		(OWASP). Этот список считается 10 наиболее опасными уязвимостями и не
		является исчерпывающим списком всех возможных уязвимостей
		веб-приложений. Методологии оценки безопасности веб-приложений часто
		основаны на 10 лучших OWASP в качестве отправной точки для основных
		категорий недостатков, которые должен проверять оценщик. Текущий список
		OWASP Top 10:
			
			1. 	Сломанный контроль доступа 	Ограничения не применяются
			надлежащим образом для предотвращения доступа пользователей к
			учетным записям других пользователей, просмотра конфиденциальных
			данных, доступа к несанкционированным функциям, изменения данных и
			т. д.
				
				https://owasp.org/Top10/A01_2021-Broken_Access_Control/

			2. 	Криптографические сбои 	Сбои, связанные с криптографией, которые
			часто приводят к раскрытию конфиденциальных данных или компрометации
			системы.

				https://owasp.org/Top10/A02_2021-Cryptographic_Failures/

			3. 	Инъекция 	Введенные пользователем данные не проверяются, не
			фильтруются и не очищаются приложением. Некоторыми примерами
			инъекций являются SQL-инъекция, инъекция команды, инъекция LDAP и т.
			д.
				
				https://owasp.org/Top10/A03_2021-Injection/

			4. 	Небезопасный дизайн 	Эти проблемы возникают, когда приложение
			не разработано с учетом требований безопасности.
				
				https://owasp.org/Top10/A04_2021-Insecure_Design/

			5. 	Неправильная конфигурация безопасности 	Отсутствие надлежащего
			усиления безопасности в любой части стека приложений, небезопасные
			конфигурации по умолчанию, открытое облачное хранилище, подробные
			сообщения об ошибках, которые раскрывают слишком много информации.
				
				https://owasp.org/Top10/A05_2021-Security_Misconfiguration/

			6. 	Уязвимые и устаревшие компоненты 	Использование уязвимых,
			неподдерживаемых или устаревших компонентов (как на стороне клиента,
			так и на стороне сервера).
				
				https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/

			7. 	Ошибки идентификации и аутентификации 	Атаки, связанные с
			аутентификацией, нацеленные на идентификацию пользователя,
			аутентификацию и управление сеансом.
				
				https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/				

			8. 	Сбои целостности программного обеспечения и данных 	Сбои
			целостности программного обеспечения и данных связаны с кодом и
			инфраструктурой, которые не защищают от нарушений целостности.
			Примером этого является ситуация, когда приложение использует
			плагины, библиотеки или модули из ненадежных источников,
			репозиториев и сетей доставки контента (CDN).
				
				https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/


			9. 	Регистрация безопасности и мониторинг сбоев 	Эта категория
			предназначена для помощи в обнаружении, эскалации и реагировании на
			активные нарушения. Без регистрации и мониторинга нарушения не могут
			быть обнаружены.
				
				https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/

			10. 	Подделка запроса на стороне сервера 	Ошибки SSRF
			возникают всякий раз, когда веб-приложение извлекает удаленный
			ресурс без проверки предоставленного пользователем URL-адреса. Это
			позволяет злоумышленнику заставить приложение отправить созданный
			запрос в неожиданное место назначения, даже если оно защищено
			брандмауэром, VPN или другим типом списка управления доступом к сети
			(ACL).
				
				https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/

	
	Очень важно ознакомиться с каждой из этих категорий и различными
	уязвимостями, которые подходят каждой из них. Уязвимости веб-приложений
	будут подробно рассмотрены в следующих модулях. Чтобы узнать больше о
	веб-приложениях, ознакомьтесь с « Введение в веб-приложения ». модулем
		
		https://academy.hackthebox.com/module/details/75

