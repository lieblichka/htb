*** HTML Injection
	
	Еще одним важным аспектом безопасности внешнего интерфейса является проверка
	и очистка принятого пользовательского ввода. Во многих случаях проверка и
	очистка пользовательского ввода выполняются на серверной части. Однако в
	некоторых случаях некоторый пользовательский ввод никогда не попадет на
	серверную часть и полностью обрабатывается и отображается во внешнем
	интерфейсе. Поэтому очень важно проверять и дезинфицировать пользовательский
	ввод как на интерфейсе, так и на сервере.

	Внедрение HTML происходит, когда на странице отображается нефильтрованный
	пользовательский ввод. Это может быть либо путем извлечения ранее
	отправленного кода, например, извлечения комментария пользователя из
	серверной базы данных, либо путем прямого отображения нефильтрованного
	пользовательского ввода через JavaScriptна переднем конце.
		
		https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/03-Testing_for_HTML_Injection

	Когда пользователь имеет полный контроль над тем, как будет отображаться его
	ввод, он может отправить HTMLкод, и браузер может отображать его как часть
	страницы. Это может включать вредоносный HTMLкод, такой как внешняя форма
	входа в систему, которую можно использовать для обмана пользователей при
	входе в систему, фактически отправляя свои учетные данные для входа на
	вредоносный сервер для сбора для других атак.

	Другой пример HTML Injectionпорча веб-страницы. Он заключается во введении
	новых HTMLкод для изменения внешнего вида веб-страницы, вставки вредоносной
	рекламы или даже полного изменения страницы. Этот тип атаки может нанести
	серьезный ущерб репутации компании, на которой размещено веб-приложение. 

	# Example
		
		Следующий пример представляет собой очень простую веб-страницу с одной
		кнопкой " Click to enter your name." Когда мы нажимаем на кнопку, она
		предлагает нам ввести наше имя, а затем отображает наше имя как " Your
		name is ...":
			
			~~~___ LINK ___~~~ img/web_apps_html_injection_5.jpg

		Если дезинфекция входных данных отсутствует, это может стать легкой
		мишенью для HTML Injectionа также Cross-Site Scripting (XSS)атаки. Мы
		смотрим на исходный код страницы и не видим никакой очистки ввода,
		поскольку страница принимает пользовательский ввод и напрямую отображает
		его:
			
			<!DOCTYPE html>
			<html>

			<body>
				<button onclick="inputFunction()">Click to enter your name</button>
				<p id="output"></p>

				<script>
					function inputFunction() {
						var input = prompt("Please enter your name", "");

						if (input != null) {
							document.getElementById("output").innerHTML = "Your name is " + input;
						}
					}
				</script>
			</body>

			</html>

		Для проверки HTML Injection, мы можем просто ввести небольшой фрагмент
		HTMLcode как наше имя и посмотрите, отображается ли оно как часть
		страницы. Мы протестируем следующий код, который изменяет фоновое
		изображение веб-страницы:

			<style> body { background-image: url('https://academy.hackthebox.com/images/logo.svg'); } </style>

		Как только мы вводим его, мы видим, что фоновое изображение веб-страницы мгновенно меняется:
			
			~~~___ LINK ___~~~ img/web_apps_html_injection_6.jpg




*** QUESTIONS
	
	TARGET: 157.245.35.145:31108
		
 	CONTENT OF HOST:
		
		Целевой контент - параграф c id=output

			<p id="output"></p>

			
        	function inputFunction() {
            	var input = prompt("Please enter your name", "");

            	if (input != null) {
                	document.getElementById("output").innerHTML = "Your name is " + input;
           		 }
        	}

	Эксплуатация HTML INJECTION 
            	
		if (input != null) {
			document.getElementById("output").innerHTML = "Your name is " + input;
		 }

		 # Входные данные должным образом не фильтруются!

	Вводим полезную нагрузку:
		
		<a href="http://www.hackthebox.com">Click Me</a> 

	RESULT:
		
		Your name is Click Me
		
	### Отображается текст с нижним подчеркиванием, теперь на странице
	можно перейти по указанной ссылке, которая можеть содержать потенциально
	опасные url-адреса   
    
		
