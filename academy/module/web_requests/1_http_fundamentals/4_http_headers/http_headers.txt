*** HTTP-headers
HTTP-заголовки 
	
	- Мы видели примеры HTTP-запросов и заголовков ответов в предыдущем разделе. 
	Такие заголовки HTTP передают информацию между клиентом и сервером. 
	Некоторые заголовки используются только с запросами или ответами, в то время 
	как некоторые другие общие заголовки являются общими для обоих.

	- Заголовки могут иметь одно или несколько значений, добавленных после имени 
	заголовка и разделенных двоеточием. Мы можем разделить заголовки на следующие 
	категории: 
	
		1. General Headers
		2. Entity Headers
		3. Request Headers
		4. Response Headers
		5. Security Headers

	### General Headers
	Общие заголовки
		
		- Общие заголовки используются как в HTTP-запросах, так и в ответах. 
		Они контекстуальны и используются для describe the message rather than 
		its contents.
			
			https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html

			Date		Date: Wed, 16		Содержит дату и время создания сообщения. 
						Feb 2022			Предпочтительно преобразовывать время 
						10:38:44 GMT 		в стандартный UTC часовой пояс

			Connection	Connection:			Определяет, должно ли текущее сетевое 
						close				подключение оставаться активным после 
											завершения запроса. Два часто 
											используемых значения для этого 
											заголовка: closeа также keep-alive. 
											В closeзначение от клиента или 
											сервера означает, что они хотели бы 
											разорвать соединение, в то время как 
											keep-aliveзаголовок указывает, что 
											соединение должно оставаться открытым 
											для получения дополнительных данных 
											и ввода. 

	### Entity Headers
	Заголовки сущностей

		- Подобно общим заголовкам, заголовки объектов могут быть common to both 
		the request and response. Эти заголовки используются для describe the 
		content(объект), переданный сообщением. Обычно они встречаются в ответах 
		и запросах POST или PUT.
			
			https://www.w3.org/Protocols/rfc2616/rfc2616-sec7.html

			Content-Type		Content-Type: text/html

				Используется для описания типа передаваемого ресурса. Значение 
				автоматически добавляется браузерами на стороне клиента и 
				возвращается в ответе сервера. charset Поле обозначает стандарт 
				кодирования, например UTF-8.
					
					https://en.wikipedia.org/wiki/UTF-8
			
			Media-Type			Media-Type:
								application/pdf
				
				В media-type похоже на Content-Typeи описывает передаваемые данные. 
				Этот заголовок может сыграть решающую роль в том, чтобы заставить 
				сервер интерпретировать наш ввод. charset Поле также может 
				использоваться с этим заголовком. 

			Boundary			boundary="b4e4fbd93540"
				
				Действует как создатель для разделения контента, когда в одном 
				сообщении их несколько. Например, в данных формы эта граница 
				используется как --b4e4fbd93540 отделить разные части формы.

			Content-Length		Content-Length: 385
				
				Содержит размер передаваемого объекта. Этот заголовок необходим, 
				так как сервер использует его для чтения данных из тела сообщения 
				и автоматически генерируется браузером и такими инструментами, 
				как cURL.

			Content-Encoding	Content-Encoding: gzip 
				
				Данные могут претерпевать несколько преобразований перед передачей.
				Например, большие объемы данных могут быть сжаты для уменьшения 
				размера сообщения. Тип используемого кодирования должен быть 
				указан с помощью Content-Encoding заголовок. 

	### Request Headers
	Заголовки запроса
		
		- Клиент отправляет заголовки запроса в транзакции HTTP. Эти заголовки 
		used in an HTTP request and do not relate to the content сообщения. 
		Следующие заголовки обычно встречаются в HTTP-запросах.	
			
			https://tools.ietf.org/html/rfc2616
			
			Host		Host: www.inlanefreight.com
				
				Используется для указания хоста, запрашиваемого для ресурса. 
				Это может быть доменное имя или IP-адрес. HTTP-серверы могут 
				быть настроены для размещения различных веб-сайтов, которые 
				раскрываются на основе имени хоста. Это делает заголовок хоста 
				важной целью перечисления, поскольку он может указывать на 
				существование других хостов на целевом сервере.
			
			User-Agent		User-Agent: curl/7.77.0
				
				В User-Agentзаголовок используется для описания клиента, 
				запрашивающего ресурсы. Этот заголовок может многое рассказать 
				о клиенте, например, о браузере, его версии и операционной 
				системе.

			Referer			Referer: http://www.inlanefreight.com
				
				Обозначает, откуда исходит текущий запрос. Например, если щелкнуть 
				ссылку в результатах поиска Google, https://google.comреферер. 
				Доверие к этому заголовку может быть опасным, поскольку им можно 
				легко манипулировать, что может привести к непредвиденным 
				последствиям.

			Accept			Accept: */*
				
				В Acceptзаголовок описывает, какие типы мультимедиа клиент может 
				понять. Он может содержать несколько типов мультимедиа, 
				разделенных запятыми. */*значение означает, что все типы 
				носителей принимаются.

			Cookie			Cookie: PHPSESSID= b4e4fbd93540
				
				Содержит пары значений cookie в формате name=value. Файл cookie — 
				это часть данных, хранящихся на стороне клиента и на сервере, 
				которая действует как идентификатор. Они передаются на сервер по 
				запросу, таким образом поддерживая доступ клиента. Файлы cookie 
				также могут служить другим целям, таким как сохранение 
				пользовательских настроек или отслеживание сеансов. В одном 
				заголовке может быть несколько файлов cookie, разделенных точкой 
				с запятой.
					
					https://en.wikipedia.org/wiki/HTTP_cookie

			Authorization	Authorization: BASIC cGFzc3dvcmQK
				
				Другой метод для сервера, чтобы идентифицировать клиентов. После 
				успешной аутентификации сервер возвращает токен, уникальный для 
				клиента. В отличие от файлов cookie, токены хранятся только на 
				стороне клиента и извлекаются сервером по запросу. Существует 
				несколько типов аутентификации в зависимости от используемого 
				веб-сервера и типа приложения.

		- Полный список заголовков запросов и их использование можно найти здесь  
			
			https://tools.ietf.org/html/rfc7231#section-5

	### Response Headers
	Заголовки ответа
		
		- Заголовки ответа могут быть used in an HTTP response and do not relate 
		to the content. Некоторые заголовки ответов, такие как Age, Location,
		а также Server используются для предоставления большего контекста ответа. 
		Следующие заголовки обычно встречаются в ответах HTTP.
			
			https://tools.ietf.org/html/rfc7231#section-6
				
			Server				Server: Apache/2.2.14(Win32)

				Содержит информацию о HTTP-сервере, обработавшем запрос. Его 
				можно использовать для получения информации о сервере, например, 
				его версии, и дальнейшего ее перечисления. 

			Set-Cookie			Set-Cookie: PHPSESSID=b4e4fbd93540
			
				Содержит файлы cookie, необходимые для идентификации клиента. 
				Браузеры анализируют файлы cookie и сохраняют их для будущих 
				запросов. Этот заголовок следует тому же формату, что и Cookie 
				заголовок запроса. 

			WWW-Authenticate	WWW-Authenticate: BASIC realm="localhost"
				
				Уведомляет клиента о типе аутентификации, необходимом для доступа 
				к запрошенному ресурсу.

	### Security Headers
	Заголовки безопасности
		
		- Наконец, у нас есть заголовки безопасности . С увеличением количества 
		браузеров и веб-атак определение определенных заголовков потребовало 
		повышения безопасности. Заголовки безопасности HTTP a class of response 
		headers used to specify certain rules and policiesкоторым должен следовать 
		браузер при доступе к веб-сайту. 
			
			https://owasp.org/www-project-secure-headers/
			
			Content-Security-Policy		Content-Security-Policy:
										script-src 'self' 

				Определяет политику веб-сайта в отношении внешних ресурсов. Это 
				может быть код JavaScript, а также ресурсы скрипта. Этот заголовок 
				указывает браузеру принимать ресурсы только из определенных 
				доверенных доменов, тем самым предотвращая такие атаки, как 
				межсайтовый скриптинг (XSS). 
					
					https://en.wikipedia.org/wiki/Cross-site_scripting


			Strict-Transport-Security	Strict-Transport-Security:
										max-age=31536000

				Предотвращает доступ браузера к веб-сайту по протоколу HTTP с 
				открытым текстом и принудительно передает все сообщения по 
				защищенному протоколу HTTPS. Это предотвращает перехват 
				веб-трафика злоумышленниками и доступ к защищенной информации, 
				такой как пароли или другие конфиденциальные данные. 

			Referer-Policy				Referer-Policy: origin
				
				Определяет, должен ли браузер включать значение, указанное в 
				Referer заголовок или нет. Это может помочь избежать раскрытия 
				конфиденциальных URL-адресов и информации при просмотре веб-сайта.

		...(ПРИМЕЧАНИЕ) В этом разделе упоминается только небольшое подмножество 
		часто встречающихся заголовков HTTP. Есть много других контекстных 
		заголовков, которые можно использовать в HTTP-коммуникациях. Приложения 
		также могут определять собственные заголовки в соответствии со своими 
		требованиями. Полный список стандартных HTTP-заголовков можно найти здесь
			
			https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers

	### cURL
		
		- В предыдущем разделе мы видели, как с помощью -vфлаг с cURL показывает 
		нам полную информацию о HTTP-запросе и ответе. Если бы нас интересовали 
		только заголовки ответов, мы могли бы использовать -Iфлаг для отправки 
		HEAD запрос и отображать только заголовки ответа. Кроме того, мы можем 
		использовать -i флаг для отображения как заголовков, так и тела ответа 
		(например, кода HTML). Разница между ними в том, что -I посылает 
		HEAD запрос (как будет показано в следующем разделе), в то время как -i 
		отправляет любой запрос, который мы указываем, а также печатает заголовки. 	
		
		- Следующая команда показывает пример вывода с использованием -I флаг: 
			
			curl -I https://www.inlanefreight.com
				
				HTTP/1.1 200 OK
				Date: Sun, 12 Jun 2022 13:29:09 GMT
				Server: Apache/2.4.29 (Ubuntu)
				Link: <https://www.inlanefreight.com/index.php/wp-json/>; rel="https://api.w.org/"
				Link: <https://www.inlanefreight.com/index.php/wp-json/wp/v2/pages/7>; rel="alternate"; type="application/json"
				Link: <https://www.inlanefreight.com/>; rel=shortlink
				Content-Type: text/html; charset=UTF-8
		
		- Помимо просмотра заголовков, cURL также позволяет нам устанавливать 
		заголовки запросов с помощью -Hфлаг, как мы увидим в следующем разделе. 
		Некоторые заголовки, такие как User-Agent или Cookie заголовки, имеет 
		свои собственные флаги. Например, мы можем использовать функцию -A установить 
		наш User-Agent, следующим образом:
			
			curl -I https://www.inlanefreight.com -A 'Mozilla/5.0' -v 
				
				...
				User-Agent: Mozilla/5.0
			
			curl -I https://www.inlanefreight.com  -v 
				
				User-Agent: curl/7.83.1

			
	### Browser DevTools

		- Наконец, давайте посмотрим, как мы можем просмотреть заголовки HTTP 
		с помощью инструментов разработчика браузера. Как и в предыдущем разделе, 
		мы можем перейти к Network вкладку для просмотра различных запросов, 
		сделанных страницей. Мы можем нажать на любой из запросов, чтобы 
		просмотреть его детали:
			
			$$$~ img src = devtools_network_requests_details.jpg

		- Во-первых Headers на вкладке мы видим как HTTP-запрос, так и заголовки 
		HTTP-ответа. Инструменты разработчика автоматически распределяют заголовки 
		по разделам, но мы можем нажать на кнопку Rawкнопку, чтобы просмотреть 
		их детали в необработанном формате. Кроме того, мы можем проверить Cookies 
		tab, чтобы увидеть все файлы cookie, используемые запросом, как описано 
		в следующем разделе.

	### Questions
		
		159.65.58.189:30622
			
			Network
				
				GET flag_327a6c4304ad5938eaf0efb6cc3e53dc.txt

		@ curl -s -O 159.65.58.189:30622/flag_327a6c4304ad5938eaf0efb6cc3e53dc.txt
		
		@ ls
			
			flag_327a6c4304ad5938eaf0efb6cc3e53dc.txt

		@ cat flag_327a6c4304ad5938eaf0efb6cc3e53dc.txt & echo
			
			HTB{p493_r3qu3$t$_m0n!t0r}
			
