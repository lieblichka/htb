*** INTRODUCTION 
Введение 
	
	- Веб-приложения — это интерактивные приложения, работающие в веб-браузерах. 
		
		https://en.wikipedia.org/wiki/Web_application

	Веб-приложения обычно используют архитектуру клиент-сервер для запуска и
	обработки взаимодействий. Как правило, они имеют внешние компоненты (т. е.
	интерфейс веб-сайта или «то, что видит пользователь»), которые выполняются
	на стороне клиента (браузер), и другие внутренние компоненты (исходный код
	веб-приложения), которые выполняются на стороне сервера ( внутренний
	сервер/базы данных). 
		
		https://cio-wiki.org/wiki/Client_Server_Architecture

	- Это позволяет организациям размещать мощные приложения с почти полным
	контролем в режиме реального времени над их дизайном и функциональностью,
	будучи доступными по всему миру. Некоторые примеры типичных веб-приложений
	включают онлайн-службы электронной почты, такие как Gmail, такие
	интернет-магазины, как Amazon, а также текстовые онлайн-процессоры, такие
	как Google Docs. 

	Веб-приложения не являются эксклюзивными для гигантских провайдеров, таких
	как Google или Microsoft, но могут быть разработаны любым веб-разработчиком
	и размещены в Интернете в любой из распространенных служб хостинга, чтобы их
	мог использовать любой пользователь в Интернете. Вот почему сегодня у нас
	есть миллионы веб-приложений по всему Интернету, с которыми ежедневно
	взаимодействуют миллиарды пользователей.

	
	### Web Applications vs. Websites
	Веб-приложения против веб-сайтов 
		
		В прошлом мы взаимодействовали со статичными веб-сайтами, которые нельзя
		изменить в режиме реального времени. Это означает, что традиционные
		веб-сайты были созданы статически для представления определенной
		информации, и эта информация не изменится при нашем взаимодействии.
		Чтобы изменить содержимое сайта, соответствующая страница должна быть
		отредактирована разработчиками вручную. Эти типы статических страниц не
		содержат функций и, следовательно, не производят изменений в реальном
		времени. Этот тип веб-сайта также известен как Web 1.0 . 
			
			https://en.wikipedia.org/wiki/Web_2.0#Web_1.0

			~~~___LINK___~~~ img/website_vs_webapps.jpg

		С другой стороны, на большинстве веб-сайтов работают веб-приложения или
		Web 2.0:

			https://en.wikipedia.org/wiki/Web_2.0
			

		- Представляющие динамический контент на основе взаимодействия с
		пользователем. Другое существенное отличие заключается в том, что
		веб-приложения полностью функциональны и могут выполнять различные
		функции для конечного пользователя, в то время как веб-сайты лишены
		такой функциональности. Другие ключевые различия между традиционными
		веб-сайтами и веб-приложениями включают:

			# Быть модульным

			# Запуск на любом размере дисплея

			# Работает на любой платформе без оптимизации

			

	### Web Applications vs. Native Operating System Applications
	Веб-приложения против собственных приложений операционной системы
			
		- В отличие от собственных приложений операционной системы (родной ОС),
		веб-приложения не зависят от платформы и могут работать в браузере в
		любой операционной системе. Эти веб-приложения не нужно устанавливать в
		системе пользователя, поскольку эти веб-приложения и их функции
		выполняются удаленно на удаленном сервере и, следовательно, не занимают
		места на жестком диске конечного пользователя.

		Еще одним преимуществом веб-приложений перед родными приложениями ОС
		является единство версий. Все пользователи, обращающиеся к
		веб-приложению, используют одну и ту же версию и одно и то же
		веб-приложение, которое можно постоянно обновлять и изменять, не
		отправляя обновления каждому пользователю. Веб-приложения можно
		обновлять в одном месте (веб-сервере) без разработки разных сборок для
		каждой платформы, что значительно снижает затраты на обслуживание и
		поддержку, устраняя необходимость сообщать об изменениях всем
		пользователям индивидуально.

		С другой стороны, нативные приложения ОС имеют определенные преимущества
		перед веб-приложениями, в основном их скорость работы и возможность
		использовать собственные библиотеки операционной системы и локальное
		оборудование. Поскольку нативные приложения создаются с использованием
		собственных библиотек ОС, они намного быстрее загружаются и
		взаимодействуют с ними. Кроме того, нативные приложения обычно более
		функциональны, чем веб-приложения, поскольку они имеют более глубокую
		интеграцию с операционной системой и не ограничиваются только
		возможностями браузера.

		Однако в последнее время все большее распространение получают гибридные
		и прогрессивные веб-приложения. Они используют современные платформы для
		запуска веб-приложений с использованием собственных возможностей и
		ресурсов ОС, что делает их быстрее, чем обычные веб-приложения, и более
		функциональными.

	### Web Application Distribution
	Распространение веб-приложений
		
		Существует множество веб-приложений с открытым исходным кодом,
		используемых организациями по всему миру, которые можно настроить в
		соответствии с потребностями каждой организации. Некоторые
		распространенные веб-приложения с открытым исходным кодом включают:

			# Вордпресс
				
				https://wordpress.com/

			# OpenCart
				
				https://www.opencart.com/

			# Джумла
				
				https://www.joomla.org/


		Существуют также проприетарные веб-приложения с «закрытым исходным
		кодом», которые обычно разрабатываются определенной организацией, а
		затем продаются другой организации или используются организациями по
		модели плана подписки. Некоторые распространенные веб-приложения с
		закрытым исходным кодом включают:

			# Викс
				
				https://www.wix.com/

			# Shopify
				
				https://www.shopify.com/

			# DotNetNuke
				
				https://www.dnnsoftware.com/



	### Security Risks of Web Applications
	Риски безопасности веб-приложений
		
		Атаки на веб-приложения широко распространены и представляют собой
		проблему для большинства организаций, имеющих веб-присутствие,
		независимо от их размера. В конце концов, они обычно доступны из любой
		страны всем, у кого есть подключение к Интернету и веб-браузер, и обычно
		предлагают обширную поверхность для атак. Существует множество
		автоматизированных инструментов для сканирования и атаки веб-приложений,
		которые в чужих руках могут нанести значительный ущерб. По мере того,
		как веб-приложения становятся все более сложными и продвинутыми,
		возрастает и вероятность того, что в их дизайн будут включены
		критические уязвимости.

		Успешная атака на веб-приложение может привести к значительным потерям и
		массовым перерывам в работе. Поскольку веб-приложения выполняются на
		серверах, на которых может размещаться другая конфиденциальная
		информация, и часто также связаны с базами данных, содержащими
		конфиденциальные пользовательские или корпоративные данные, все эти
		данные могут быть скомпрометированы в случае успешной атаки на веб-сайт.
		Вот почему для любого бизнеса, использующего веб-приложения, крайне
		важно должным образом тестировать эти приложения на наличие уязвимостей
		и быстро исправлять их, проверяя, что исправление устраняет недостаток и
		не создает случайно никаких новых недостатков.

		Тестирование на проникновение веб-приложений становится все более важным
		навыком для изучения. Любая организация, стремящаяся обезопасить свои
		веб-приложения, выходящие в Интернет (и внутренние), должна проводить
		частые тесты веб-приложений и внедрять методы безопасного кодирования на
		каждом этапе жизненного цикла разработки. Чтобы правильно проводить
		пентестирование веб-приложений, нам необходимо понимать, как они
		работают, как разрабатываются и какой риск лежит на каждом уровне и
		компоненте приложения в зависимости от используемых технологий.

		Мы всегда будем сталкиваться с различными веб-приложениями, которые
		спроектированы и настроены по-разному. Одним из наиболее актуальных и
		широко используемых методов тестирования веб-приложений является OWASP
		Web Security Testing Guide .
			
			https://github.com/OWASP/wstg/tree/master/document/4-Web_Application_Security_Testing

		Одна из наиболее распространенных процедур — начать с просмотра
		интерфейсных компонентов веб-приложения, таких как HTML, CSSа также
		JavaScript(также известный как троица внешних интерфейсов) и попытаться
		найти уязвимости, такие как раскрытие конфиденциальных данных и
		межсайтовый скриптинг (XSS).
			
			https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure

			https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)
		
		После того, как все внешние компоненты тщательно протестированы, мы
		обычно проверяем основные функции веб-приложения и взаимодействие между
		браузером и веб-сервером, чтобы перечислить технологии, используемые
		веб-сервером, и найти уязвимые места. Обычно мы оцениваем веб-приложения
		с точки зрения как неавторизованных, так и аутентифицированных (если
		приложение имеет функцию входа в систему), чтобы максимизировать охват и
		рассмотреть каждый возможный сценарий атаки.

	### Attacking Web Applications
	Атака на веб-приложения 
		
		В наши дни почти каждая компания, независимо от размера, имеет одно или
		несколько веб-приложений в пределах своего внешнего периметра. Этими
		приложениями могут быть все, от простых статических веб-сайтов до
		блогов, работающих на системах управления контентом (CMS), таких как
		WordPressдо сложных приложений с функциями регистрации/входа,
		поддерживающими различные роли пользователей от обычных пользователей до
		суперадминистраторов. В настоящее время не очень часто можно найти
		внешний хост, который можно напрямую использовать с помощью известного
		общедоступного эксплойта (например, уязвимой службы или уязвимости
		удаленного выполнения кода Windows (RCE)), хотя это происходит.
		Веб-приложения предоставляют обширную поверхность для атак, а их
		динамичный характер означает, что они постоянно меняются (и упускаются
		из виду!). Относительно простое изменение кода может привести к
		катастрофической уязвимости или ряду уязвимостей, которые могут быть
		объединены в цепочку для получения доступа к конфиденциальным данным или
		удаленного выполнения кода на веб-сервере или других узлах в среде,
		таких как серверы баз данных.

		Нередко обнаруживаются недостатки, которые могут привести
		непосредственно к выполнению кода, например форма загрузки файла,
		которая позволяет загружать вредоносный код, или уязвимость включения
		файла, которую можно использовать для удаленного выполнения кода. Хорошо
		известная уязвимость, которая до сих пор довольно распространена в
		различных типах веб-приложений, — это SQL-инъекция. Этот тип уязвимости
		возникает из-за небезопасной обработки введенных пользователем данных.
		Это может привести к доступу к конфиденциальным данным, чтению/записи
		файлов на сервере базы данных и даже удаленному выполнению кода.
		
		Мы часто находим уязвимости SQL-инъекций в веб-приложениях, использующих
		Active Directory для аутентификации. Хотя мы обычно не можем
		использовать это для извлечения паролей (поскольку их администрирует
		Active Directory), мы часто можем получить большинство или все адреса
		электронной почты пользователей Active Directory, которые часто
		совпадают с их именами пользователей. Затем эти данные можно использовать 
		для атаки с распылением пароля на веб-порталы, использующие Active 
		Directory для аутентификации, такие как VPN или Microsoft Outlook Web 
		Access/Microsoft O365. 
			
			# Атака с распылением пароля
			https://us-cert.cisa.gov/ncas/current-activity/2019/08/08/acsc-releases-advisory-password-spraying-attacks

		В этом примере показан ущерб, который может возникнуть из-за одной
		уязвимости веб-приложения, особенно когда она «сцеплена» для извлечения
		данных из одного приложения, которые можно использовать для атаки на
		другие части внешней инфраструктуры компании. Всесторонне развитый
		специалист по информационной безопасности должен иметь глубокое
		понимание веб-приложений и уметь атаковать веб-приложения так же легко,
		как проводить тестирование на проникновение в сеть и проводить атаки на
		Active Directory. Тестировщик на проникновение с прочным опытом работы с
		веб-приложениями часто может выделиться среди своих коллег и найти
		недостатки, которые другие могут не заметить. Вот еще несколько реальных
		примеров атак на веб-приложения и последствия:
			
		- SQL-инъекция 	
			
			https://owasp.org/www-community/attacks/SQL_Injection
			
			Получение имен пользователей Active Directory и выполнение атаки с
			распылением пароля на портал VPN или электронной почты.

		- Включение файла 	
			
			https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion
			
			Чтение исходного кода для поиска скрытой страницы или каталога,
			предоставляющего дополнительные функции, которые можно использовать
			для удаленного выполнения кода.

		- Неограниченная загрузка файлов 	
			
			https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload

			Веб-приложение, которое позволяет пользователю загружать изображение
			профиля, которое позволяет загружать файлы любого типа (не только
			изображения). Это можно использовать для получения полного контроля
			над сервером веб-приложений путем загрузки вредоносного кода.

		- Небезопасная прямая ссылка на объект (IDOR) 	
			
			https://cheatsheetseries.owasp.org/cheatsheets/Insecure_Direct_Object_Reference_Prevention_Cheat_Sheet.html

			В сочетании с таким недостатком, как нарушенный контроль доступа,
			это часто можно использовать для доступа к файлам или функциям
			другого пользователя. Примером может быть редактирование вашего
			профиля пользователя при просмотре такой страницы, как
			/user/701/edit-profile. Если мы сможем изменить 701к 702, мы можем
			редактировать профиль другого пользователя!

		- Сломанный контроль доступа 	
			
			https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control
	
			Другим примером является приложение, которое позволяет пользователю
			зарегистрировать новую учетную запись. Если функциональность
			регистрации учетной записи разработана плохо, пользователь может
			выполнить эскалацию привилегий при регистрации. Рассмотрим
			POSTзапрос при регистрации нового пользователя, который отправляет
			данные
			username=bjones&password=Welcome1&email=bjones@inlanefreight.local&roleid=3.
			Что, если мы сможем манипулировать roleidпараметр и измените его на
			0или же 1. Мы видели реальные приложения, в которых это имело место,
			и можно было быстро зарегистрировать пользователя-администратора и
			получить доступ ко многим непреднамеренным функциям веб-приложения.

			

		Начните знакомиться с распространенными атаками на веб-приложения и их
		последствиями. Не волнуйтесь, если какой-либо из этих терминов покажется
		вам чуждым; они станут яснее по мере вашего прогресса и применения
		итеративного подхода к обучению.

		Крайне важно глубоко изучить веб-приложения и ознакомиться с тем, как
		они работают, и с множеством различных стеков приложений. Мы будем
		неоднократно сталкиваться с атаками на веб-приложения во время нашего
		путешествия в Академию, на основной платформе HTB и в реальных оценках.
		Давайте погрузимся и изучим структуру/функции веб-приложений, чтобы
		стать более информированными злоумышленниками, выделиться среди наших
		коллег и найти недостатки, которые другие могут не заметить. Крайне
		важно глубоко изучить веб-приложения и ознакомиться с тем, как они
		работают, а также со многими различными стеками приложений и типами
		приложений. 



