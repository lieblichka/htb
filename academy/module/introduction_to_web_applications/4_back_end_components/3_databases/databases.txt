*** Databases

	- Веб-приложения используют внутренние базы данных для хранения различного
	контента и информации, связанной с веб-приложением. 
		
		https://en.wikipedia.org/wiki/Database

	Это могут быть основные ресурсы веб-приложений, такие как изображения и
	файлы, контент веб-приложений, такой как сообщения и обновления, или
	пользовательские данные, такие как имена пользователей и пароли. Это
	позволяет веб-приложениям легко и быстро сохранять и извлекать данные, а
	также включать динамическое содержимое, которое отличается для каждого
	пользователя. 

	Существует множество различных типов баз данных, каждый из которых подходит
	для определенного типа использования. Большинство разработчиков ищут в базе
	данных определенные характеристики, такие как speedпри хранении и извлечении
	данных, sizeпри хранении больших объемов данных, scalabilityпо мере роста
	веб-приложения и cost.
	
	### Relational (SQL)
	Реляционный (SQL) 

		Реляционные (SQL) базы данных хранят свои данные в таблицах, строках и
		столбцах. Каждая таблица может иметь уникальные ключи, которые могут
		связывать таблицы вместе и создавать отношения между таблицами.
			
			https://en.wikipedia.org/wiki/Relational_database

		Например, у нас может быть usersтаблица в реляционной базе данных,
		содержащая такие столбцы, как id, username, first_name, last_name, и так
		далее. idможно использовать в качестве ключа таблицы. Другой стол,
		posts, может содержать сообщения, сделанные всеми пользователями, с
		такими столбцами, как id, user_id, date, content, и так далее. 
			
			~~~___ LINK ___~~~ img/web_apps_relational_db.jpg


		Мы можем связать idот usersстол к user_idв poststable, чтобы легко
		получить информацию о пользователе для каждого сообщения без
		необходимости хранить все данные о пользователе с каждым сообщением.

		Таблица может иметь более одного ключа, так как другой столбец может
		использоваться в качестве ключа для связи с другой таблицей. Например,
		idстолбец можно использовать в качестве ключа для связи poststable в
		другую таблицу, содержащую комментарии, каждый из которых относится к
		определенному посту, и так дале
			
			(...) Связь между таблицами в базе данных называется схемой. 
		
		Таким образом, используя реляционные базы данных, можно очень быстро и
		легко получить все данные об определенном элементе из всех баз данных.
		Например, мы можем получить все данные, связанные с определенным
		пользователем, из всех таблиц с помощью одного запроса. Это делает
		реляционные базы данных очень быстрыми и надежными для больших наборов
		данных, которые имеют четкую структуру и дизайн. Базы данных также
		делают управление данными очень эффективным.

		Некоторые из наиболее распространенных реляционных баз данных включают в
		себя:
			
			MySQL 	Наиболее часто используемая база данных в Интернете. Это
					база данных с открытым исходным кодом, которую можно
					использовать совершенно бесплатно.
						
						https://en.wikipedia.org/wiki/MySQL

			
			MSSQL 	Реализация Microsoft реляционной базы данных. Широко
					используется с серверами Windows и веб-серверами IIS.
						
						https://en.wikipedia.org/wiki/Microsoft_SQL_Server

			
			Oracle 	Очень надежная база данных для крупного бизнеса, которая
					часто обновляется инновационными решениями для баз данных,
					чтобы сделать ее более быстрой и надежной. Это может быть
					дорого даже для
					крупного бизнеса.
						
						https://en.wikipedia.org/wiki/Oracle_Database

			
			PostgreSQL 	Еще одна бесплатная реляционная база данных с открытым
						исходным кодом. Он спроектирован так, чтобы его можно
						было легко расширять, что позволяет добавлять новые
						расширенные функции без необходимости внесения серьезных
						изменений в первоначальный дизайн базы данных.
							

						https://en.wikipedia.org/wiki/PostgreSQL



			Other common SQL databases include: SQLite, MariaDB, Amazon Aurora,
			and Azure SQL.



	### Non-relational (NoSQL)
	Нереляционный (NoSQL) 
		
		Нереляционная база данных не использует таблицы, строки, столбцы,
		первичные ключи, отношения или схемы. 
			
			https://en.wikipedia.org/wiki/NoSQL

		Вместо этого NoSQLбаза данных хранит данные, используя различные модели
		хранения, в зависимости от типа хранимых данных.

		Из-за отсутствия определенной структуры базы данных, NoSQLбазы данных
		очень масштабируемы и гибки. При работе с наборами данных, которые не
		очень хорошо определены и структурированы, NoSQLбаза данных будет лучшим
		выбором для хранения наших данных.

		Существует 4 распространенные модели хранения для NoSQLбазы данных:

			-Ключ-значение
			-на основе документов
			-Широкая колонка
			-График

		Каждая из вышеперечисленных моделей имеет свой способ хранения данных.
		Например, Key-Valueмодель обычно хранит данные в JSONили же XML, и имеет
		ключ для каждой пары, сохраняя все свои данные в качестве значения:
			
			~~~___ LINK ___~~~ img/web_apps_non-relational_db.jpg

		Приведенный выше пример можно представить с помощью JSONследующее: 
			
			{
			  "100001": {
				"date": "01-01-2021",
				"content": "Welcome to this web application."
			  },
			  "100002": {
				"date": "02-01-2021",
				"content": "This is the first post on this web app."
			  },
			  "100003": {
				"date": "02-01-2021",
				"content": "Reminder: Tomorrow is the ..."
			  }
			}

		Это похоже на пару словарь/карта/ключ-значение в таких языках, как
		Pythonили же PHPт.е. {'key':'value'}', где keyобычно это строка,
		valueможет быть строкой, словарем или любым объектом класса.

		The Document-Basedмодель хранит данные в комплексе JSONобъекты, и каждый
		объект имеет определенные метаданные, а остальные данные хранятся
		аналогично Key-Valueмодель.

		Некоторые из наиболее распространенных NoSQLбазы данных включают в себя:
			
			MongoDB 			Самый распространенный NoSQLбаза данных. Это бесплатно и
								с открытым исходным кодом, использует
								Document-Basedмодели и хранит данные в
								JSONобъекты

			ElasticSearch 		Еще один бесплатный и открытый NoSQLбаза данных.
								Он оптимизирован для хранения и анализа огромных
								наборов данных. Как следует из названия, поиск
								данных в этой базе данных очень быстрый и
								эффективный.

			Apache Cassandra 	Также бесплатно и с открытым исходным кодом. Он
								очень масштабируемый и оптимизирован для изящной
								обработки ошибочных значений.

			
		Другое общее NoSQLбазы данных включают в себя: Redis, Neo4j, CouchDB, а
		также Amazon DynamoDB.

	### Use in Web Applications
	Использование в веб-приложениях 
		
		Большинство современных языков и сред веб-разработки упрощают
		интеграцию, хранение и извлечение данных из различных типов баз данных.
		Но сначала база данных должна быть установлена и настроена на внутреннем
		сервере, и как только она будет запущена и запущена, веб-приложения
		могут начать использовать ее для хранения и извлечения данных.

		Например, в пределах PHPвеб-приложение, один раз MySQLзапущен и
		работает, мы можем подключиться к серверу базы данных с помощью:
			
			$conn = new mysqli("localhost", "user", "pass");


		Затем мы можем создать новую базу данных с помощью:
			
			$sql = "CREATE DATABASE database1";
			$conn->query($sql)

		После этого мы можем подключиться к нашей новой базе данных и начать
		использовать MySQLбазу данных через MySQLсинтаксис, прямо внутри PHP,
		следующее:
			
			$conn = new mysqli("localhost", "user", "pass", "database1");
			$query = "select * from table_1";
			$result = $conn->query($query);

		Веб-приложения обычно используют пользовательский ввод при извлечении
		данных. Например, когда пользователь использует функцию поиска для
		поиска других пользователей, его поисковый ввод передается
		веб-приложению, которое использует ввод для поиска в базе данных
		(базах).
			
			$searchInput =  $_POST['findUser'];
			$query = "select * from users where name like '%$searchInput%'";
			$result = $conn->query($query);

		Наконец, веб-приложение отправляет результат обратно пользователю:
			
			while($row = $result->fetch_assoc() ){
				echo $row["name"]."<br>";
			}

		Этот базовый пример показывает нам, насколько просто использовать базы
		данных. Однако, если код базы данных не защищен безопасным кодом, это
		может привести к множеству проблем, таких как уязвимости SQL Injection . 

			https://owasp.org/www-community/attacks/SQL_Injection			





