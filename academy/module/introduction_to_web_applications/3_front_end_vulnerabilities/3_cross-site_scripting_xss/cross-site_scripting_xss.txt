*** Cross-Site Scripting (XSS)
Межсайтовый скриптинг (XSS)
	
	HTML Injectionуязвимости часто можно использовать для выполнения атак
	межсайтового скриптинга (XSS) путем внедрения JavaScriptкод, который будет
	выполняться на стороне клиента. Как только мы сможем выполнить код на машине
	жертвы, мы потенциально сможем получить доступ к учетной записи жертвы или
	даже к ее машине. XSSочень похоже на HTML Injectionна практике. Однако,
	XSSвключает в себя введение JavaScriptкод для выполнения более сложных атак
	на стороне клиента, вместо простого внедрения кода HTML. Существует три
	основных типа XSS:
		
		https://owasp.org/www-community/attacks/xss/

		Reflected XSS 	

			Происходит, когда пользовательский ввод отображается на
			странице после обработки (например, результат поиска или сообщение об
			ошибке).

		Stored XSS 	

			Происходит, когда пользовательский ввод сохраняется во
			внутренней базе данных, а затем отображается при извлечении (например,
			сообщения или комментарии).

		DOM XSS 	

			Происходит, когда пользовательский ввод отображается
			непосредственно в браузере и записывается в HTMLОбъект DOM (например,
			уязвимое имя пользователя или заголовок страницы). 

	В примере, который мы видели для HTML Injection, не было никакой дезинфекции
	ввода. Таким образом, одна и та же страница может быть уязвима для XSSатаки.
	Мы можем попробовать внедрить следующее DOM XSS JavaScriptкод в качестве
	полезной нагрузки, который должен показать нам значение cookie для текущего
	пользователя: 
		
		#"><img src=/ onerror=alert(document.cookie)>

	Как только мы введем нашу полезную нагрузку и нажмем ok, мы видим, что
	всплывает окно предупреждения со значением cookie: 
		
		~~~___ LINK ___~~~ img/web_apps_xss_2.jpg

	Эта полезная нагрузка обращается к HTMLдерево документов и получение
	cookieстоимость объекта. Когда браузер обработает наш ввод, он будет
	считаться новым DOM, и наш JavaScriptбудет выполнен, отображая значение
	cookie во всплывающем окне.

	Злоумышленник может использовать это, чтобы украсть сеансы cookie и
	отправить их себе, а также попытаться использовать значение cookie для
	аутентификации в учетной записи жертвы. Та же самая атака может
	использоваться для выполнения различных типов других атак против
	пользователей веб-приложения. XSS— обширная тема, которая будет подробно
	рассмотрена в последующих модулях. 


QUESTIONS:	

	TARGET: 157.245.35.145:31732 
		
		if (input != null) {
			document.getElementById("output").innerHTML = "Your name is " + input;
		 }
	
	EXPLOTATION: 
		
		input = #"><img src=/ onerror=alert(document.cookie)>

	RESULT:

		cookie=XSSisFun
