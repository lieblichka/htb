*** APPOINTMENT 

### SQL - STRUCTURED QUERY LANGUAGE 

	- Язык структурированных запросов


	# Какой тип уязвимостей SQL является одним 
	из наиболее распространенных
	
		- SQL-injection

	# Что означает PII
	
		- Personal Indentify Infrormation

	# Как в списке OWASP TOP 10 называется классификация
	уязвимости SQL-onjection
		
		- A03:2021-injection

	# Машина в текущем задании работат на 80 порту и использует
	службу:
	
		nmap {target-ip} -sC -sV 	
		- Apache httpd 2.4.38 ((Debian))

	# Стандартный порт протокола HTTPS
		
		- 443

	# Какой один основанный на удаче метод эксплуатации страниц входа
		
		- bruteforcing

	# Какой код ответа для ошибок "Not Found"

		- 404

		= 200 OK : Page exists 
	 	= 404 Not found : Page/resourse does not exists
		= 302 Page/resourse found, but by rediraction to another directory




	### ENUMERATION
	ПЕРЕЧИСЛЕНИЕ
		
		- Сначала мы выполняем сканирование nmap, чтобы найти открытые и 
		доступные порты и их службы. Если в синтаксисе команды не указан 
		альтернативный флаг, nmap просканирует наиболее распространенные 1000 
		TCP-портов на наличие активных служб. В нашем случае это подойдет.
		
		sudo nmap -sC -sV {target_ip}
		
			80/tcp open  http    Apache httpd 2.4.38 ((Debian))
			|_http-title: Login
			|_http-server-header: Apache/2.4.38 (Debian)

		- Сканирование nmap предоставило нам точную версию службы Apache 
		httpd — 2.4.38. Обычно хорошей идеей будет поиск версии службы в 
		популярных онлайн-базах уязвимостей, чтобы узнать, существует ли 
		какая-либо уязвимость для указанной версии. Однако в нашем случае эта 
		версия не содержит ни одной известной уязвимости, которую мы могли бы 
		потенциально использовать.

		- Для дальнейшего перечисления службы, работающей на порту 80, мы можем 
		перейти непосредственно к IP-адресу цели из нашего браузера, внутри 
		нашего экземпляра Pwnbox или виртуальной машины

			http://{target_ip}:80/


	### FOOTHOLD
	ПЛАЦДАРМ

		- Введя IP-адрес цели в поле URL нашего браузера, мы сталкиваемся с 
		веб-сайтом, содержащим форму входа. Формы входа используются для 
		аутентификации пользователей и предоставления им доступа к закрытым 
		частям веб-сайта в зависимости от уровня привилегий, связанного с 
		введенным именем пользователя. Поскольку нам неизвестны какие-либо 
		конкретные учетные данные, которые мы могли бы использовать для входа в 
		систему, мы проверим, есть ли какие-либо другие каталоги или страницы, 
		полезные для нас в процессе перечисления. Всегда считается хорошей 
		практикой полностью перечислить цель, прежде чем мы нацелимся на 
		конкретную уязвимость, о которой мы знаем, например, в данном случае 
		уязвимость SQL Injection. Нам нужна полная картина, чтобы убедиться, что 
		мы ничего не упустили и не попали в кроличью нору, что может быстро
		разочаровать.  Страницы, к которым мы все привыкли, такие как 
			
			# Home
				
			# About

			# Contact

			# Register

			# Log-in 
				
				... pages

		- URL-адрес в верхней части окна нашего браузера будет меняться в 
		зависимости от нашего текущего местоположения.
			
			https://www.example.com/home			# домашняя страница

			https://www.example.com/contact 		# контактная страница 

			https://www.example.com/login			# страница авторизации

			https://www.example.com/login/forgot 	# страница восстановления

		- При навигации по веб-каталогам HTTP-клиент, которым является ваш 
		браузер, связывается с HTTP-сервером (в данном случае Apache 2.4.38) с 
		использованием протокола HTTP, отправляя HTTP-запрос (GET или POST-
		сообщение), который сервер затем обрабатывать и возвращать с HTTP - 
		ответом.

		- Ответы HTTP содержат коды состояния, в которых подробно описывается 
		статус взаимодействия между запросом клиента и то, как сервер обработал 
		его. Некоторые из наиболее распространенных кодов состояния для протокола 
		HTTP
			
			HTTP1/1 200 OK: страница/ресурс существует, продолжается отправка 
			вам данных.

			HTTP1/1 404 Not Found: страница/ресурс не существует

			HTTP1/1 302 Found: страница/ресурс найдены, но перенаправлены в 
			другой каталог (временно перемещены). Это приглашение 
			пользовательскому агенту (веб-браузеру) сделать второй идентичный 
			запрос на новый URL- адрес, указанный в поле местоположения. Вы 
			будете воспринимать весь процесс как плавное перенаправление на 
			новый URL указанного ресурса.


			~~~---~~~
			Больше о веб-запросах на странице академмии

				~~~ https://academy.hackthebox.eu/module/details/35

		- Эти два приведенных выше случая — это то, на чем мы сосредоточимся при 
		попытке перечислить скрытые каталоги или ресурсы. Однако вместо того, 
		чтобы вручную перемещаться по строке поиска URL-адресов, чтобы найти эти 
		скрытые данные, мы будем использовать инструмент, который автоматизирует 
		поиск для нас. Именно здесь вступают в игру такие инструменты, как
		Gobuster, Dirbuster, Dirb и другие.
			
			images , scripts , login.php , admin.php # перебор осуществляется
			по поуплярным ресурсам 



	### GOBUSTER
	Утилита на языке GOLANG, использующаяся для атак типа brute-forcing

		
		# Installation
			
			@ sudo pacman -S go 
				
				# перед началом установки gobuster необходимо установить GO

			@ git clone https://github.com/OJ/gobuster.git 

				# репозиторий GOBUSTER 

			@ cd gobuster
			@ make linux
			@ make test
			
			@ git clone https://github.com/danielmiessler/SecLists.git 

				# wordlists for gobuster 			
			
		
		# Using GOBUSTER

			
			@ gobuster dir --url http://scanme.nmap.org/ \
				--wordlist {wordlist_location}/SecLists/Discovery/Web-Content

				# перебирает по словарю возможных директорий и отправляет GET 
				запросы на смодерированные URL-адреса 
			
			@ gobuster dir --url http://10.129.32.223/ --wordlist 
			SecLists/Discovery/Web-Content/directory-list-2.3-small.txt
				
				/images               (Status: 301) [Size: 315] [--> http://10.129.32.223/images/]
				/css                  (Status: 301) [Size: 312] [--> http://10.129.32.223/css/]
				/js                   (Status: 301) [Size: 311] [--> http://10.129.32.223/js/]
				/vendor				  (Status: 301) [Size: 315] [--> http://10.129.32.223/vendor/]
				/fonts                (Status: 301) [Size: 314] [--> http://10.129.32.223/fonts/]

			- Проверив веб-каталоги, мы не нашли никакой полезной информации. 
			Результаты, представленные в наших выходных данных, представляют 
			собой каталоги по умолчанию для большинства веб-сайтов, и в 
			большинстве случаев они не содержат файлов, которые могут быть 
			использованы злоумышленником или каким-либо образом полезны для него. 
			Тем не менее, проверить их все же стоит потому что иногда они могут 
			содержать нестандартные файлы, помещенные туда по ошибке. 


		### IF WAS NOT FOUND DIRS 

			# Если GOBUSTER не нашел ни одной полезной диррктории, то следует
			обеспечить FOOTHOLD (ПЛАЦДАРМ)

			# ПЛАЦДАРМ: проверить стандартные пароли в форме авторизации
			
				http://{host_ip}:8080 

				admin:admin
				guest:guest
				user:user
				root:root
				administrator:password 

		### IF IS NO ONE PASSWORD CORRECT 

			# Если ни один логин и пароль не подошел к форме авторизации
			тогда можно попытаться использовать SQL-injection 

			- Внедрение SQL — это распространенный способ использования 
			веб-страниц, использующих «выражения SQL», которые извлекают и 
			сохраняют вводимые пользователем данные. При неправильной настройке 
			можно использовать эту атаку для эксплуатации известной уязвимости 
			SQL Injection, что очень опасно. Существует множество различных 
			методов защиты от SQL-инъекций, некоторые из которых включают проверку ввода,
			параметризованные запросы, хранимые процедуры и реализацию WAF 
			(брандмауэра веб-приложений) на периметре сети сервера. Однако могут 
			быть обнаружены случаи, когда ни одно из этих исправлений не 
			установлено, поэтому этот тип атаки распространен, согласно 
			[OWASP Top 10] (https://owasp.org/www-project- top-ten/). список 
			веб-уязвимостей

			# SQL-injection on PHP form:
				
				PHP форма имеет код 
				--------------------
				$sql = "SELECT * FROM users WHERE username='$username' AND password='$password'";
				$result=mysql_query($sql);
				$count=mysql_num_rows($result);
				if ($count==1) {...} 

			# Так как в PHP комментарий начинается после символа ( # )
			эксплутируем явную уязвимость данного кода 
				
				$sql = "SELECT * FROM users WHERE username='$username' AND password='$password'";

				- Если подставить в колонку с логином значение: 
					
					admin'# 

				то переменная $username будет иметь значение = admin'# и 
				запрос будет выглядеть уже по другому 

					@sql = "SELECT * FROM users WHERE username='admin'#' AND password=''";
						
				 В PHP после # код транслироваться не будет, а значит
					
					@result=mysql_query("SELECT * FROM users WHERE username='admin'")

		### CATCH YOUR FLAG !!!!!				

			
				




