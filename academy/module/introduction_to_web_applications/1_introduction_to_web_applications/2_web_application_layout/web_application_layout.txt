*** Web Application Layout
Макет веб-приложения

	Нет двух одинаковых веб-приложений. Предприятия создают веб-приложения для
	множества целей и аудиторий. Веб-приложения разрабатываются и
	программируются по-разному, и внутренняя инфраструктура может быть настроена
	по-разному. Важно понимать различные способы скрытой работы веб-приложений,
	структуру веб-приложения, его компоненты и способы их настройки в
	инфраструктуре компании.

	Макеты веб-приложений состоят из множества различных слоев, которые можно
	свести к следующим трем основным категориям: 

		Web Application Infrastructure 
			
			Описывает структуру необходимых компонентов, таких как база данных,
			необходимая для того, чтобы веб-приложение функционировало должным
			образом. Поскольку веб-приложение можно настроить для работы на
			отдельном сервере, важно знать, к какому серверу базы данных оно
			должно обращаться.

		Web Application Components 
			
			Компоненты, составляющие веб-приложение, представляют собой все
			компоненты, с которыми взаимодействует веб-приложение. Они делятся
			на следующие три области: UI/UX, Client, а также Serverсоставные
			части.

		Web Application Architecture 	
			
			Архитектура включает в себя все отношения между различными
			компонентами веб-приложения. 


	### Web Application Infrastructure
	Инфраструктура веб-приложений
		
		Веб-приложения могут использовать множество различных настроек
		инфраструктуры. Их также называют models. Наиболее распространенные из
		них можно сгруппировать в следующие четыре типа:
			

			# Client-Server

			# One Server

			# Many Servers - One Database

			# Many Servers - Many Databases


		
		# Client-Server
		Клиент-сервер
			
			Веб-приложения часто используют client-serverмодель. Сервер
			размещает веб-приложение в модели клиент-сервер и распространяет его
			среди всех клиентов, пытающихся получить к нему доступ.
				
				~~~___ LINK ___~~~ img/client-server-model.jpg
				
			В этой модели веб-приложения имеют два типа компонентов: компоненты
			внешнего интерфейса, которые обычно интерпретируются и выполняются
			на стороне клиента (браузера), и компоненты внутреннего интерфейса,
			которые обычно компилируются, интерпретируются и выполняются
			хостингом. сервер.

			Когда клиент посещает URL-адрес веб-приложения (веб-адрес, т. е.
			https://www.acme.local), сервер использует основной интерфейс
			веб-приложения ( UI). Как только пользователь нажимает кнопку или
			запрашивает определенную функцию, браузер отправляет веб-запрос HTTP
			на сервер, который интерпретирует этот запрос и выполняет
			необходимые задачи для выполнения запроса (т. е. регистрирует
			пользователя, добавляет товар в корзину, переход на другую страницу
			и т. д.). Как только сервер получает необходимые данные, он
			отправляет результат обратно в браузер клиента, отображая результат
			в удобочитаемом виде.

			This website we are currently interacting with is also a web
			application, developed and hosted by Hack The Box (webserver), and
			we access it and interact with it using our web browser (client).

			Однако, несмотря на то, что большинство веб-приложений используют
			клиент-серверную архитектуру клиент-сервер, существует множество
			реализаций дизайна.


		# One Server
		Один сервер
			
			В этой архитектуре все веб-приложение или даже несколько
			веб-приложений и их компонентов, включая базу данных, размещаются на
			одном сервере. Хотя этот дизайн прост и легок в реализации, он также
			является самым рискованным.
				
				~~~___ LINK ___~~~ img/one-server-arch.jpg

			Если какое-либо веб-приложение, размещенное на этом сервере, будет
			скомпрометировано в этой архитектуре, то все данные веб-приложений
			будут скомпрометированы. Этот дизайн представляет собой « all eggs
			in one basket", поскольку, если какое-либо из размещенных
			веб-приложений уязвимо, весь веб-сервер становится уязвимым.

			Кроме того, если веб-сервер по какой-либо причине выходит из строя,
			все размещенные веб-приложения становятся полностью недоступными до
			тех пор, пока проблема не будет решена.


		# Many Servers - One Database
		Много серверов — одна база данных
			
			Эта модель разделяет базу данных на собственный сервер базы данных и
			позволяет хост-серверу веб-приложений получать доступ к серверу базы
			данных для хранения и извлечения данных. Это можно рассматривать как
			множество серверов для одной базы данных и один сервер для одной
			базы данных, если база данных разделена на своем собственном сервере
			базы данных.
				
				~~~___ LINK ___~~~ img/many-server-one-db-arch.jpg

			Эта модель может позволить нескольким веб-приложениям обращаться к
			одной базе данных, чтобы иметь доступ к одним и тем же данным без
			синхронизации данных между ними. Веб-приложения могут быть копиями
			одного основного приложения (т. е. основного/резервного) или
			отдельными веб-приложениями, которые совместно используют общие
			данные.

			Главное преимущество этой модели ( from a security point of view) —
			это сегментация, при которой каждый из основных компонентов
			веб-приложения размещается и размещается отдельно. Если один
			веб-сервер скомпрометирован, другие веб-серверы не будут затронуты
			напрямую. Точно так же, если база данных скомпрометирована
			(например, из-за уязвимости SQL-инъекции), само веб-приложение не
			подвергается непосредственному воздействию. По-прежнему существуют
			меры контроля доступа, которые необходимо реализовать после
			сегментации активов, например, ограничение доступа веб-приложений
			только к данным, необходимым для надлежащего функционирования.


		# Many Servers - Many Databases
		Много серверов - много баз данных
			
			Эта модель строится на Many Servers, One Databaseмодель. Однако на
			сервере базы данных данные каждого веб-приложения размещаются в
			отдельной базе данных. Веб-приложение может получить доступ только к
			личным данным и только к общим данным, которые являются общими для
			веб-приложений. Также возможно разместить базу данных каждого
			веб-приложения на отдельном сервере базы данных.
				
				~~~___ LINK ___~~~ img/many-server-many-db-arch.jpg

			Этот дизайн также широко используется в целях резервирования,
			поэтому, если какой-либо веб-сервер или база данных отключаются,
			вместо них будет выполняться резервное копирование, чтобы
			максимально сократить время простоя. Хотя это может быть сложнее
			реализовать и могут потребоваться такие инструменты, как
			балансировщики нагрузки , эта архитектура является одним из лучших
			вариантов с точки зрения безопасности из-за ее надлежащих мер
			контроля доступа и надлежащей сегментации ресурсов. для надлежащей
			работы
				
				https://en.wikipedia.org/wiki/Load_balancing_(computing)
					
			Помимо этих моделей, существуют и другие модели веб-приложений,
			такие как бессерверные веб-приложения или веб-приложения,
			использующие микросервисы .
				
				# Бессерверные
					
					https://aws.amazon.com/lambda/serverless-architectures-learn-more

				# Микросервисы
					
					https://aws.amazon.com/microservices

	### Web Application Components
	Компоненты веб-приложений 
		
		- Каждое веб-приложение может иметь разное количество компонентов. Тем не
		менее, все компоненты упомянутых ранее моделей можно разбить на:

			Client
			|
			Server
				-Веб сервер
				-Логика веб-приложения
				-База данных
			___|
			|
			Services(Микросервисы)
				-Сторонние интеграции
				-Интеграция веб-приложений
			___|
			|
			Functions(без сервера)


	### Web Application Architecture
	Архитектура веб-приложений
		
		Компоненты веб-приложения делятся на три разных уровня.

			Presentation Layer 

				Состоит из компонентов процесса пользовательского интерфейса,
				которые обеспечивают связь с приложением и системой. Клиент
				может получить к ним доступ через веб-браузер и вернуть в виде
				HTML, JavaScript и CSS.

			Application Layer 	

				Этот уровень обеспечивает правильную обработку всех клиентских
				запросов (веб-запросов). Проверяются различные критерии, такие
				как авторизация, привилегии и данные, передаваемые клиенту.

			Data Layer 	

				Уровень данных работает в тесном контакте с прикладным уровнем,
				чтобы точно определить, где хранятся требуемые данные и к ним
				можно получить доступ.

		Пример архитектуры веб-приложения может выглядеть примерно так:
			
			~~~___ LINK ___~~~ img/image5-12.png
				
			https://docs.microsoft.com/en-us/dotnet/architecture/modern-web-apps-azure/common-web-application-architectures

		# Microservices
		Микросервис
			
			Мы можем думать о микросервисах как о независимых компонентах
			веб-приложения, которые в большинстве случаев запрограммированы
			только для одной задачи. Например, для интернет-магазина мы можем
			разложить основные задачи на следующие составляющие:

				-Регистрация
				-Поиск
				-Платежи
				-Рейтинги
				-Отзывы

			Эти компоненты взаимодействуют с клиентом и друг с другом. Связь
			между этими микросервисами stateless, что означает, что запрос и
			ответ независимы. Это связано с тем, что сохраненные данные stored
			separatelyиз соответствующих микросервисов.
				
			Использование микросервисов считается сервис-ориентированной
			архитектурой (SOA) , построенной как набор различных
			автоматизированных функций, ориентированных на единую бизнес-цель.
			Тем не менее, эти микросервисы зависят друг от друга.
				
				https://en.wikipedia.org/wiki/Service-oriented_architecture
					
			Еще одним важным и эффективным компонентом микросервисов является
			то, что они могут быть написаны на разных языках программирования и
			при этом взаимодействовать. Микросервисы выигрывают от более легкого
			масштабирования и более быстрой разработки приложений, что
			способствует инновациям и ускоряет выпуск новых функций. Некоторые
			преимущества микросервисов включают в себя:

				-Ловкость
				-Гибкое масштабирование
				-Простое развертывание
				-Многоразовый код
				-Устойчивость

			AWS В этом техническом документе представлен отличный обзор
			реализации микросервисов. 
				
				https://d1.awsstatic.com/whitepapers/microservices-on-aws.pdf


		# Serverless
		Бессерверный 
			
			Облачные провайдеры, такие как AWS, GCP, Azure и другие, предлагают
			бессерверные архитектуры. Эти платформы предоставляют инфраструктуру
			приложений для создания таких веб-приложений, не беспокоясь о самих
			серверах. Затем эти веб-приложения запускаются в вычислительных
			контейнерах без сохранения состояния (например, в Docker). Этот тип
			архитектуры дает компании гибкость для создания и развертывания
			приложений и услуг без необходимости управления инфраструктурой; все
			управление сервером осуществляется поставщиком облачных услуг, что
			избавляет от необходимости выделять, масштабировать и обслуживать
			серверы, необходимые для запуска приложений и баз данных.

			Подробнее о бессерверных вычислениях и различных вариантах их
			использования можно прочитать здесь .
				
				https://aws.amazon.com/serverless


	### Architecture Security  
	Безопасность архитектуры
		
		Понимание общей архитектуры веб-приложений и конкретного дизайна каждого
		веб-приложения важно при выполнении теста на проникновение в любое
		веб-приложение. Во многих случаях уязвимость отдельного веб-приложения
		может быть вызвана не обязательно ошибкой программирования, а ошибкой
		проектирования в его архитектуре.
			
		Например, все основные функции отдельного веб-приложения могут быть
		защищены. Однако из-за отсутствия надлежащих мер контроля доступа в его
		конструкции, т. е. использования управления доступом на основе ролей
		(RBAC)
			
			https://en.wikipedia.org/wiki/Role-based_access_control
				
		Пользователи могут получить доступ к некоторым функциям администратора,
		которые не предназначены для их прямого доступа, или даже получить
		доступ к ним. личную информацию другого пользователя, не имея на это
		привилегий. Чтобы решить проблему такого типа, необходимо будет внести
		значительные изменения в конструкцию, что, вероятно, будет дорогостоящим
		и трудоемким.
			
		Другой пример: если мы не можем найти базу данных после использования
		уязвимости и получения контроля над внутренним сервером, это может
		означать, что база данных размещена на отдельном сервере. Мы можем найти
		только часть данных базы данных, что может означать, что используется
		несколько баз данных. Вот почему безопасность необходимо учитывать на
		каждом этапе разработки веб-приложения, а тесты на проникновение
		необходимо проводить на протяжении всего жизненного цикла разработки
		веб-приложения.


