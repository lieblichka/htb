*** GET

	- Всякий раз, когда мы посещаем какой-либо URL-адрес, наши браузеры по 
	умолчанию отправляют запрос GET для получения удаленных ресурсов, 
	размещенных по этому URL-адресу. Как только браузер получает начальную 
	страницу, которую он запрашивает; он может отправлять другие запросы, 
	используя различные методы HTTP. Это можно увидеть на вкладке «Сеть» в 
	инструментах разработки браузера, как показано в предыдущем разделе.  	
		
		... Упражнение: выберите любой веб-сайт по вашему выбору и отслеживайте 
		вкладку «Сеть» в инструментах разработки браузера, когда вы посещаете 
		его, чтобы понять, что делает страница. Этот метод можно использовать 
		для полного понимания того, как веб-приложение взаимодействует с его 
		серверной частью, что может быть важным упражнением для любой оценки 
		веб-приложения или упражнения по поиску ошибок.

	### HTTP Basic Auth
	Базовая HTTP-аутентификация

		- Когда мы посещаем упражнение, найденное в конце этого раздела, оно 
		предлагает нам ввести имя пользователя и пароль. В отличие от обычных 
		форм входа, которые используют параметры HTTP для проверки учетных 
		данных пользователя (например, запрос POST), этот тип аутентификации 
		использует basic HTTP authentication, который обрабатывается 
		непосредственно веб-сервером для защиты определенной страницы/каталога 
		без прямого взаимодействия с веб-приложением. 

		- Чтобы получить доступ к странице, мы должны ввести действительную пару 
		учетных данных 
			
			admin: admin 
		
			$$$~ http_auth_login.jpg

		- Как только мы введем учетные данные, мы получим доступ к странице: 
			
			$$$~ http_auth_index.jpg
		
		- Давайте попробуем получить доступ к странице с помощью cURL, и мы 
		добавим -i для просмотра заголовков ответа:
			
			curl -i http://<SERVER_IP>:<PORT>/
				
				HTTP/1.1 401 Authorization Required
				WWW-Authenticate: Basic realm="Access denied"

		- Как видим, получаем Access denied в теле ответа, а также получаем 
		Basic realm="Access denied" в WWW-Authenticate заголовок, который 
		действительно подтверждает, что эта страница действительно использовалась 
		basic HTTP auth, как обсуждалось в разделе «Заголовки». Чтобы предоставить 
		учетные данные через cURL, мы можем использовать -u флаг следующим 
		образом:
			
			curl -u admin:admin http://<SERVER_IP>:<PORT>/
		
		- На этот раз мы получаем страницу в ответе. Есть еще один метод, 
		который мы можем предоставить basic HTTP authучетные данные, которые 
		находятся непосредственно через URL-адрес как ( username:password@URL), 
		как мы обсуждали в первом разделе. Если мы попробуем то же самое с cURL 
		или нашим браузером, мы также получим доступ к странице: 

			curl http://admin:admin@<SERVER_IP>:<PORT>/

		- Мы также можем попробовать посетить тот же URL-адрес в браузере, и мы 
		также должны пройти аутентификацию. 
			
			... Упражнение: попробуйте просмотреть заголовки ответов, добавив -i 
			к приведенному выше запросу, и посмотрите, чем аутентифицированный 
			ответ отличается от неаутентифицированного.


	### HTTP Authorization Header
	Заголовок авторизации HTTP 
		
		- Если мы добавим -v флаг любой из наших предыдущих команд cURL:
			
			curl -v http://admin:admin@<SERVER_IP>:<PORT>/
				
				*Server auth using Basic with user 'admin'
				>Authorization: Basic YWRtaW46YWRtaW4=
				>
				< HTTP/1.1 200 OK
				< Content-Type: text/html; charset=UTF-8

		- Как мы используем basic HTTP auth, мы видим, что наш HTTP-запрос 
		устанавливает Authorization заголовок к Basic YWRtaW46YWRtaW4=, что 
		является значением в кодировке base64 admin:admin. Если бы мы 
		использовали современный метод аутентификации (например, JWT), 
		Authorization будет типа Bearerи будет содержать более длинный 
		зашифрованный токен.

		- Попробуем вручную установить Authorization, не предоставляя учетные 
		данные, чтобы узнать, разрешает ли он нам доступ к странице. Мы можем 
		установить заголовок с помощью -H флаг и будет использовать то же 
		значение из приведенного выше HTTP-запроса. Мы можем добавить -H флаг 
		несколько раз, чтобы указать несколько заголовков: 
			
			curl -H 'Authorization: Basic YWRtaW46YWRtaW4=' http://<SERVER_IP>:<PORT>/
				
				<!DOCTYPE html
					... 								

		- Как мы видим, это также дало нам доступ к странице. Вот несколько 
		методов, которые мы можем использовать для аутентификации на странице. 
		Большинство современных веб-приложений используют формы входа в систему, 
		созданные с помощью внутреннего языка сценариев (например, PHP), 
		которые используют HTTP-запросы POST для аутентификации пользователей, 
		а затем возвращают cookie для поддержания их аутентификации. 

	### GET Parameters
	ПОЛУЧИТЬ параметры
		
		- После аутентификации мы получаем доступ к City Searchфункция, в 
		которой мы можем ввести поисковый запрос и получить список подходящих 
		городов: 
			
			$$$~ http_auth_index.jpg
		
		- Поскольку страница возвращает наши результаты, она может связываться 
		с удаленным ресурсом, чтобы получить информацию, а затем отобразить ее 
		на странице. Чтобы убедиться в этом, мы можем открыть инструменты 
		разработчика браузера и перейти на вкладку «Сеть» или использовать ярлык 
		[ CTRL+SHIFT+E], чтобы перейти на ту же вкладку. Прежде чем мы введем 
		наш поисковый запрос и просмотрим запросы, нам может потребоваться 
		нажать на кнопку trash значок в левом верхнем углу, чтобы убедиться, что 
		мы очищаем все предыдущие запросы и отслеживаем только новые запросы: 

			$$$~ network_clear_requests.jpg
	
		- После этого мы можем ввести любой поисковый запрос и нажать Enter, и 
		мы сразу же заметим новый запрос, отправленный на серверную часть: 
			
			$$$~ web_requests_get_search.jpg
		
		- Когда мы нажимаем на запрос, он отправляется на search.php с параметром 
		GET search=le используется в URL-адресе. Это помогает нам понять, что 
		функция поиска запрашивает другую страницу для результатов.

		- Теперь мы можем отправить тот же запрос непосредственно на search.php 
		чтобы получить полные результаты поиска, хотя он, вероятно, вернет их в
		определенном формате (например, JSON) без макета HTML, показанного на 
		снимке экрана выше.

		- Чтобы отправить запрос GET с cURL, мы можем использовать тот же 
		URL-адрес, что и на скриншотах выше, поскольку запросы GET помещают свои 
		параметры в URL-адрес. Однако средства разработки браузера предоставляют 
		более удобный способ получения команды cURL. Мы можем щелкнуть правой 
		кнопкой мыши запрос и выбрать Copy>Copy as cURL. Затем мы можем вставить 
		скопированную команду в наш терминал и выполнить ее, и мы должны получить 
		точно такой же ответ:
			
			curl 'http://<SERVER_IP>:<PORT>/search.php?search=le' -H 'Authorization: Basic YWRtaW46YWRtaW4='
				
				Leeds (UK)
				Leicester (UK)

			... Примечание . Скопированная команда будет содержать все заголовки, 
			используемые в HTTP-запросе. Однако мы можем удалить большинство из 
			них и оставить только необходимые заголовки аутентификации, такие как 
			Authorization заголовок.

		- Мы также можем повторить точный запрос прямо в devtools браузера, 
		выбрав Copy>Copy as Fetch. Это скопирует тот же HTTP-запрос, используя 
		библиотеку JavaScript Fetch. Затем мы можем перейти на вкладку консоли 
		JavaScript, нажав [ CTRL+SHIFT+K], вставьте нашу команду Fetch и нажмите 
		Enter, чтобы отправить запрос: 

			$$$~ web_requests_fetch_search.jpg

			GET http://143.110.164.90:32351/search.php?search=le

			RIGHT BUTTON ON MOUSE  "Use as Fetch in Console"

		- Как мы видим, браузер отправил наш запрос, и мы видим ответ, 
		возвращенный после него. Мы можем щелкнуть ответ, чтобы просмотреть его 
		детали, развернуть различные детали и прочитать их. 

	### QUEST
	
		 curl http://143.110.164.90:30910/
		 	
			HTTP/1.1 401 Authorization Required
			Date: Thu, 22 Dec 2022 23:16:15 GMT
			Server: Apache/2.4.41 (Ubuntu)
			Cache-Control: no-cache, must-revalidate, max-age=0
			WWW-Authenticate: Basic realm="Access denied"
			Content-Type: text/html; charset=UTF-8

			### Basic realm="Access denied" 

		curl -u admin:admin http://143.110.164.90:30910 -I  -v 
		curl http://admin:admin@143.110.164.90:30910 -I  -v 
			
			*   Trying 143.110.164.90:30910...
			* Connected to 143.110.164.90 (143.110.164.90) port 30910 (#0)
			* Server auth using Basic with user 'admin'
			> HEAD / HTTP/1.1
			> Host: 143.110.164.90:30910
			> Authorization: Basic YWRtaW46YWRtaW4=
			> User-Agent: curl/7.87.0
			> Accept: */*
			>
			* Mark bundle as not supporting multiuse
			< HTTP/1.1 200 OK

			### > Authorization: Basic YWRtaW46YWRtaW4=

		
		curl http://143.110.164.90:30910 -H 'Authorization: Basic YWRtaW46YWRtaW4=' -i -v


			
			<!DOCTYPE html>
			<html lang="en">

			<head>
				<meta charset="UTF-8">
				<title>City Search</title>
				<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/meyer-reset/2.0/reset.min.css">
				<link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Roboto:400,500,700'>
				<link rel="stylesheet" href="./style.css">

			</head>
			
		curl http://143.110.164.90:30910/search.php?search=flag  -H 'Authorization: Basic YWRtaW46YWRtaW4=' -i -v		
		 	
			*   Trying 143.110.164.90:30910...
			* Connected to 143.110.164.90 (143.110.164.90) port 30910 (#0)
			> GET /search.php?search=flag HTTP/1.1
			> Host: 143.110.164.90:30910
			> User-Agent: curl/7.87.0
			> Accept: */*
			> Authorization: Basic YWRtaW46YWRtaW4=
				
++++++++++++ flag: HTB{curl_g3773r} +++++++++++++++++




