*** Development Frameworks & APIs 
Среды разработки и API 

	

	В дополнение к веб-серверам, которые могут размещать веб-приложения на
	разных языках, существует множество распространенных сред веб-разработки,
	которые помогают в разработке основных файлов и функций веб-приложений. С
	ростом сложности веб-приложений создание современного и сложного
	веб-приложения с нуля может оказаться сложной задачей. Следовательно,
	большинство популярных веб-приложений разрабатываются с использованием
	веб-фреймворков.

	Поскольку большинство веб-приложений имеют общие функции, такие как
	регистрация пользователей, платформы веб-разработки упрощают быструю
	реализацию этих функций и связывают их с внешними компонентами, создавая
	полнофункциональное веб-приложение. Некоторые из наиболее распространенных
	сред веб-разработки включают в себя: 

	
	Laravel  ( PHP): обычно используется стартапами и небольшими компаниями,
	поскольку он мощен, но прост в разработке.  Express  ( Node.JS): использован
		
		https://laravel.com/

	PayPal, Yahoo, Uber, IBM, а также MySpace.
		
		https://expressjs.com/

    Django   ( Python): использован Google, YouTube, Instagram, Mozilla, а также Pinterest.
		
		https://www.djangoproject.com/

    Rails    ( Ruby): использован GitHub, Hulu, Twitch, Airbnb, и даже Twitterв прошлом.
		
		https://rubyonrails.org/


	### APIs
	API
		
		Важным аспектом разработки внутренних веб-приложений является
		использование веб- API 
			
			https://en.wikipedia.org/wiki/API

		И параметров HTTP-запроса для соединения внешнего и внутреннего
		интерфейса, чтобы иметь возможность отправлять данные туда и обратно
		между внешними и внутренними компонентами и выполнять различные функции
		внутри. веб-приложение.

		Чтобы внешний компонент взаимодействовал с серверной частью и запрашивал
		выполнение определенных задач, они используют их, чтобы запрашивать у
		внутреннего компонента конкретную задачу с определенным вводом.
		Внутренние компоненты обрабатывают эти запросы, выполняют необходимые
		функции и возвращают определенный ответ внешним компонентам, которые,
		наконец, отображают выходные данные конечного пользователя на стороне
		клиента. 

		
		# Query Parameters
		Параметры запроса
			
			Метод по умолчанию для отправки определенных аргументов на
			веб-страницу через GETа также POSTпараметры запроса. Это позволяет
			внешним компонентам указывать значения для определенных параметров,
			используемых на странице, чтобы внутренние компоненты обрабатывали
			их и реагировали соответствующим образом.

			Например, /search.phpстраница заняла бы itemпараметр, который может
			использоваться для указания элемента поиска. Передача параметра
			через GETзапрос выполняется через URL ' /search.php?item=apples',
			пока POSTпараметры передаются через POSTданные в нижней части POST
			HTTPзапрос:
				
				POST /search.php HTTP/1.1
				...SNIP...

				item=apples
			
			Параметры запроса позволяют одной странице получать различные типы
			входных данных, каждый из которых может обрабатываться по-разному.
			Для некоторых других сценариев использование веб-API может быть
			намного быстрее и эффективнее. Модуль веб-запросов позволяет глубже
			погрузиться в HTTPЗапросы.
				
				https://academy.hackthebox.com/course/preview/web-requests

				~~~___ LINK ___~~~ LN -> web_requests



	### Web APIs
	Веб-API 
		
		

		API ( интерфейс прикладного программирования ) — это интерфейс внутри
		приложения, который определяет, как приложение может взаимодействовать с
		другими приложениями. Для веб-приложений это то, что обеспечивает
		удаленный доступ к функциям серверных компонентов. API не являются
		исключительными для веб-приложений и используются для программных
		приложений в целом. Доступ к веб-API обычно осуществляется через
		HTTPпротокола и обычно обрабатываются и транслируются через веб-серверы.
			
			https://en.wikipedia.org/wiki/API
				
			~~~___ LINK ___~~~ img/api_examples.jpg

		Веб-приложение погоды, например, может иметь определенный API для
		получения текущей погоды для определенного города. Мы можем запросить
		URL-адрес API и передать название или идентификатор города, и он вернет
		текущую погоду в JSONобъект. Другим примером является API Twitter,
		который позволяет нам получать последние твиты из определенной учетной
		записи в XMLили же JSONформаты и даже позволяет нам отправлять твиты
		«если они прошли проверку подлинности» и так далее.

		Чтобы разрешить использование API в веб-приложении, разработчики должны
		разработать эту функциональность на серверной части веб-приложения,
		используя такие стандарты API, как SOAPили же REST.


	### SOAP 
	МЫЛО
		
		The SOAP( Простой доступ к объектам ) стандарт обменивается данными
		через XML, где запрос сделан в XMLчерез HTTP-запрос, и ответ также
		возвращается в XML. Компоненты интерфейса предназначены для разбора
		этого XMLвыводить правильно. Ниже приведен пример SOAPсообщение: 
			
			https://en.wikipedia.org/wiki/SOAP

			<?xml version="1.0"?>

			<soap:Envelope
			xmlns:soap="http://www.example.com/soap/soap/"
			soap:encodingStyle="http://www.w3.org/soap/soap-encoding">

			<soap:Header>
			</soap:Header>

			<soap:Body>
			  <soap:Fault>
			  </soap:Fault>
			</soap:Body>

			</soap:Envelope>


		SOAPочень полезен для передачи структурированных данных (т. е. всего
		объекта класса) или даже двоичных данных и часто используется с
		сериализованными объектами, что позволяет совместно использовать сложные
		данные между внешними и внутренними компонентами и правильно
		анализировать их. Это также очень полезно для совместного использования
		объектов с состоянием , то есть для совместного использования/изменения
		текущего состояния веб-страницы, что становится все более
		распространенным в современных веб-приложениях и мобильных приложениях.

		Однако, SOAPмогут быть трудны для использования новичками или требуют
		длинных и сложных запросов даже для небольших запросов, таких как
		базовые searchили же filterзапросы. Вот где RESTСтандарт API более
		полезен. 


	### REST
	ОТДЫХ
		
		The REST( Передача репрезентативного состояния ) стандарт передает
		данные через путь URL, т.е. search/users/1' и обычно возвращает вывод в
		JSONформат 'т.е. идентификатор пользователя 1'.
			
			https://en.wikipedia.org/wiki/Representational_state_transfer

		В отличие от параметров запроса, RESTAPI обычно фокусируются на
		страницах, которые ожидают, что один тип входных данных будет
		передаваться непосредственно через URL-адрес, без указания его имени или
		типа. Обычно это полезно для таких запросов, как search, sort, или же
		filter. Вот почему RESTAPI-интерфейсы обычно разбивают функциональность
		веб-приложения на более мелкие API-интерфейсы и используют эти более
		мелкие запросы API, чтобы позволить веб-приложению выполнять более
		сложные действия, делая веб-приложение более модульным и масштабируемым.

		Ответы на RESTЗапросы API обычно выполняются в JSONформат, а затем
		разрабатываются внешние компоненты для обработки этого ответа и его
		правильного отображения. Другие выходные форматы для RESTвключать XML,
		x-www-form-urlencodedили даже необработанные данные. Как видно ранее в
		databaseразделе ниже приведен пример JSONответ на GET
		/category/posts/Запрос API:
			
			{
			  "100001": {
				"date": "01-01-2021",
				"content": "Welcome to this web application."
			  },
			  "100002": {
				"date": "02-01-2021",
				"content": "This is the first post on this web app."
			  },
			  "100003": {
				"date": "02-01-2021",
				"content": "Reminder: Tomorrow is the ..."
			  }
			}

		REST использует различные методы HTTP для выполнения различных действий в веб-приложении:

			GET		запрос на получение данных
			POST	запрос на создание данных
			PUT		запрос на изменение существующих данных
			DELETE	просьба удалить данные



QUESTINONS:
	
	http://68.183.47.198:30420


	Использовать запрос GET '/index.php?id=0' для поиска имени пользователя с идентификатором 1? 
	

	http://68.183.47.198:30420/index.php?id=1
		
		superadmin 

	++++++++++GRADEME YAHOOO!!!! vshiiit 
