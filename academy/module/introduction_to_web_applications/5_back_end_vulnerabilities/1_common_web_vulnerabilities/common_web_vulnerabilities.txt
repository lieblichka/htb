*** Common Web Vulnerabilities
Распространенные веб-уязвимости 
	

	Если мы проводили тест на проникновение для веб-приложения, разработанного
	внутри компании, или не обнаружили общедоступных эксплойтов для
	общедоступного веб-приложения, мы можем вручную определить несколько
	уязвимостей. Мы также можем обнаружить уязвимости, вызванные неправильной
	настройкой, даже в общедоступных веб-приложениях, поскольку эти типы
	уязвимостей вызваны не общедоступной версией веб-приложения, а неправильной
	настройкой, сделанной разработчиками. В приведенных ниже примерах
	представлены некоторые из наиболее распространенных типов уязвимостей для
	веб-приложений, входящие в список 10 основных уязвимостей OWASP для
	веб-приложений.
		
		https://owasp.org/www-project-top-ten/
	
	### Broken Authentication/Access Control
	Сломанная аутентификация/контроль доступа
		
		Broken authenticationа также Broken Access Controlявляются одними из
		самых распространенных и наиболее опасных уязвимостей для
		веб-приложений.

		Broken Authenticationотносится к уязвимостям, которые позволяют
		злоумышленникам обходить функции аутентификации. Например, это может
		позволить злоумышленнику войти в систему, не имея действительного набора
		учетных данных, или позволить обычному пользователю стать
		администратором, не имея на это привилегий.

		Broken Access Controlотносится к уязвимостям, которые позволяют
		злоумышленникам получить доступ к страницам и функциям, к которым у них
		не должно быть доступа. Например, обычный пользователь получает доступ к
		панели администратора.

		Например, College Management System 1.2имеет простую уязвимость обхода
		аутентификации, которая позволяет нам войти в систему без учетной
		записи, введя следующее в поле электронной почты: ' or 0=0 #, и
		используя любой пароль с ним.
			
			https://www.exploit-db.com/exploits/47388

	### Malicious File Upload
	Загрузка вредоносного файла
		
		Еще один распространенный способ получить контроль над веб-приложениями
		— загрузить вредоносные скрипты. Если веб-приложение имеет функцию
		загрузки файлов и не проверяет должным образом загруженные файлы, мы
		можем загрузить вредоносный сценарий (т. е. PHPscript), что позволит нам
		выполнять команды на удаленном сервере.

		Несмотря на то, что это базовая уязвимость, многие разработчики не знают
		об этих угрозах, поэтому они не проверяют и не проверяют загружаемые
		файлы должным образом. Кроме того, некоторые разработчики выполняют
		проверки и пытаются проверить загруженные файлы, но эти проверки часто
		можно обойти, что все равно позволяет нам загружать вредоносные скрипты.

		Например, плагин WordPress. Responsive Thumbnail Slider 1.0может
		использоваться для загрузки любого произвольного файла, включая
		вредоносные скрипты, путем загрузки файла с двойным расширением (т.е.
		shell.php.jpg). Есть даже модуль Metasploit , который позволяет нам
		легко использовать эту уязвимость.
			
			https://www.rapid7.com/db/modules/exploit/multi/http/wp_responsive_thumbnail_slider_upload/

	### Command Injection
	Внедрение команд
		
		Многие веб-приложения выполняют команды локальной операционной системы
		для выполнения определенных процессов. Например, веб-приложение может
		установить подключаемый модуль по нашему выбору, выполнив команду ОС,
		которая загружает этот подключаемый модуль, используя предоставленное
		имя подключаемого модуля. При отсутствии надлежащей фильтрации и
		санитарной обработки злоумышленники могут внедрить другую команду,
		которая будет выполняться вместе с первоначально намеченной командой (т.
		е. в качестве имени подключаемого модуля), что позволит им напрямую
		выполнять команды на внутреннем сервере и получить над ним контроль.
		Этот тип уязвимости называется внедрением команды .
			
			https://owasp.org/www-community/attacks/Command_Injection

		Эта уязвимость широко распространена, поскольку разработчики могут
		неправильно дезинфицировать пользовательский ввод или использовать для
		этого слабые тесты, что позволяет злоумышленникам обходить любые
		установленные проверки или фильтры и выполнять свои команды.

		Например, плагин WordPress. Plainview Activity Monitor 20161228имеет
		уязвимость , которая позволяет злоумышленникам внедрить свою команду в
		ipзначение, просто добавив | COMMAND...после ipстоимость.
			
			https://www.exploit-db.com/exploits/45274

	### SQL Injection (SQLi)
	SQL-инъекция (SQLi)
		
		Другой очень распространенной уязвимостью в веб-приложениях является SQL
		Injectionуязвимость. Подобно уязвимости внедрения команд, эта уязвимость
		может возникнуть, когда веб-приложение выполняет SQL-запрос, включая
		значение, полученное из введенных пользователем данных.

		Например, в databaseВ разделе мы увидели пример того, как веб-приложение
		будет использовать пользовательский ввод для поиска в определенной
		таблице, со следующей строкой кода:
			
			$query = "select * from users where name like '%$searchInput%'";

		Если пользовательский ввод не фильтруется и не проверяется должным
		образом (как в случае с Command Injections), мы можем выполнить еще один
		SQL-запрос вместе с этим запросом, что в конечном итоге может позволить
		нам получить контроль над базой данных и ее хост-сервером.

		Например, тот же предыдущий College Management System 1.2страдает от
		уязвимости SQL-инъекции , в которой мы можем выполнить другую SQLзапрос,
		который всегда возвращает true, что означает, что мы успешно прошли
		аутентификацию, что позволяет нам войти в приложение. Мы можем
		использовать ту же уязвимость, чтобы получить данные из базы данных или
		даже получить контроль над хост-сервером.
			
			https://www.exploit-db.com/exploits/47388

		Мы будем видеть эти уязвимости снова и снова в нашем учебном путешествии
		и реальных оценках. Важно ознакомиться с каждым из них, поскольку даже
		базовое понимание каждого даст нам преимущество в любой сфере
		информационной безопасности. В следующих модулях будет подробно
		рассмотрена каждая из этих уязвимостей.

QUESTIONS:	
	
	К какой из вышеперечисленных категорий относится общедоступная уязвимость
	«CVE-2014-6271»?
		
		Command Injection

