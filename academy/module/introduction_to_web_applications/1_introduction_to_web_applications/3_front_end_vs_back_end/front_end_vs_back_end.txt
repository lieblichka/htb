*** Front End vs. Back End
Передняя часть против задней части 

	Возможно, мы слышали термины:
		
		https://en.wikipedia.org/wiki/Front_end_and_back_end

	front endа также back endвеб-разработка или термин веб-разработка Full Stack
		
		https://www.w3schools.com/whatis/whatis_fullstack.asp

	Который относится как к frontа также back endвеб-разработка. Эти термины
	становятся синонимами разработки веб-приложений, поскольку они составляют
	большую часть цикла веб-разработки. Однако эти термины сильно отличаются
	друг от друга, поскольку каждый относится к одной стороне веб-приложения, а
	каждый функционирует и общается в разных областях.

	### Front End
	Внешний интерфейс
		
		Внешний интерфейс веб-приложения содержит компоненты пользователя
		непосредственно через его веб-браузер (на стороне клиента). Эти
		компоненты составляют исходный код веб-страницы, которую мы
		просматриваем при посещении веб-приложения, и обычно включают HTML, CSS,
		а также JavaScript, который затем интерпретируется нашими браузерами в
		режиме реального времени.
			
			~~~___ LINK ___~~~ img/frontend-components.jpg

		Это включает в себя все, что пользователь видит и с чем взаимодействует,
		например основные элементы страницы, такие как заголовок и текст HTML ,
		дизайн и анимация всех элементов CSS , а также функции, которые
		выполняет каждая часть страницы JavaScript .
			
			# HTML
			
				https://www.w3schools.com/html/html_intro.asp

			# CSS
				
				https://www.w3schools.com/css/css_intro.asp

			# JavaScript 
				
				https://www.w3schools.com/js/js_intro.asp

		В современных веб-приложениях интерфейсные компоненты должны
		адаптироваться к любому размеру экрана и работать в любом браузере на
		любом устройстве. Это контрастирует с внутренними компонентами, которые
		обычно пишутся для конкретной платформы или операционной системы. Если
		внешний интерфейс веб-приложения не оптимизирован должным образом, это
		может сделать все веб-приложение медленным и неотзывчивым. В этом случае
		некоторые пользователи могут подумать, что хостинг-сервер или их
		интернет работают медленно, в то время как проблема полностью лежит на
		стороне клиента в браузере пользователя. Вот почему внешний интерфейс
		веб-приложения должен быть оптимизирован для большинства платформ,
		устройств (включая мобильные!) и размеров экрана.


		Помимо разработки внешнего кода, ниже приведены некоторые другие задачи, связанные с разработкой внешнего веб-приложения:
			
			-Визуальная концепция веб-дизайна
			-Дизайн пользовательского интерфейса (UI)
			-Дизайн пользовательского опыта (UX)

		Есть много сайтов, доступных нам для практики внешнего кодирования.
		Одним из примеров является этот
			
			https://html-css-js.com/

		 Здесь мы можем поиграться с редактором , набрав и отформатировав текст
		 и увидев результат. HTML, CSS, а также JavaScriptгенерируется для нас.
		 Скопируйте/вставьте этот ОЧЕНЬ простой пример в правую часть редактора:
		 	
			https://htmlg.com/html-editor/
				
				<p><strong>Welcome to Hack The Box Academy</strong><strong></strong></p>
				<p></p>
				<p><em>This is some italic text.</em></p>
				<p></p>
				<p><span style="color: #0000ff;">This is some blue text.</span></p>
				<p></p>
				<p></p>


	### Back End
	Бэкэнд
		
		Серверная часть веб-приложения управляет всеми основными функциями
		веб-приложения, и все они выполняются на внутреннем сервере, который
		обрабатывает все необходимое для правильной работы веб-приложения. Это
		та часть, которую мы никогда не увидим и с которой не будем
		взаимодействовать напрямую, но веб-сайт — это просто набор статических
		веб-страниц без серверной части.

		Существует четыре основных внутренних компонента для веб-приложений:
			
			Back end Servers 	

				Аппаратное обеспечение и операционная система, в которой
				размещены все остальные компоненты и которые обычно работают в
				таких операционных системах, как Linux, Windows, или используя
				Containers.

			Web Servers 	

				Веб-серверы обрабатывают HTTP-запросы и соединения. Некоторые
				примеры Apache, NGINX, а также IIS.

			Databases 	

				Базы данных ( DBs) хранить и извлекать данные веб-приложения.
				Некоторые примеры реляционных баз данных: MySQL, MSSQL, Oracle,
				PostgreSQL, в то время как примеры нереляционных баз данных
				включают NoSQLа также MongoDB.

			Development Frameworks 	

				Платформы разработки используются для разработки основного
				веб-приложения. Некоторые известные фреймворки включают PHP, C#,
				Java, Python, а также NodeJS JavaScript.

			~~~___ LINK ___~~~ img/backend-server.jpg

		Также можно разместить каждый компонент серверной части на отдельном
		изолированном сервере или в изолированных контейнерах, используя такие
		службы, как Docker . Некоторые части веб-приложения, такие как база
		данных, могут быть установлены в контейнер Docker, при этом основное
		веб-приложение может быть установлено в другой контейнер Docker
			
			https://www.docker.com/
			
		При этом основное веб-приложение может быть установлено в другой
		контейнер Docker, чтобы логически отделить каждую часть в надежде, что
		любые уязвимости, которые могут повлиять на одну из них (т. е.
		уязвимость веб-приложения) другой(е) контейнер(ы). Также возможно
		разделить каждый на свой выделенный сервер, обслуживание которого может
		быть более ресурсоемким и трудоемким. Тем не менее, это зависит от
		бизнес-кейса и дизайна/функциональности рассматриваемого веб-приложения.
			
		Некоторые из основных задач, выполняемых внутренними компонентами, включают:

			-Разработать основную логику и сервисы серверной части веб-приложения
			-Разработать основной код и функционал веб-приложения
			-Разрабатывать и поддерживать серверную базу данных
			-Разрабатывать и внедрять библиотеки, которые будут использоваться
			веб-приложением.  
			-Реализация технических/бизнес-потребностей для веб-приложения
			|
			-Реализовать основные API -интерфейсы для взаимодействия с внешними
			компонентами .
			|
			-	https://en.wikipedia.org/wiki/API
			|
			-Интегрируйте удаленные серверы и облачные сервисы в веб-приложение

	### Securing Front/Back End
	Защита передней/задней части
		
		Хотя в большинстве случаев у нас не будет доступа к внутреннему коду для
		анализа отдельных функций и структуры кода, это не делает приложение
		неуязвимым. Например, его все еще можно использовать для различных
		инъекционных атак.

		Предположим, у нас есть функция поиска в веб-приложении, которая по
		ошибке неправильно обрабатывает наши поисковые запросы. В этом случае мы
		могли бы использовать определенные методы для манипулирования запросами
		таким образом, чтобы получить несанкционированный доступ к определенным
		SQL-инъекциям данных базы данных или даже выполнять команды операционной
		системы через веб-приложение, также известное как инъекции команд .
			
			SQL-инекция 
				
				https://www.w3schools.com/sql/sql_injection.asp

			Инъекции команд 
				
				https://owasp.org/www-community/attacks/Command_Injection
		
		Позже мы обсудим, как защитить каждый компонент, используемый на
		переднем и заднем концах. Когда у нас есть полный доступ к исходному
		коду внешних компонентов, мы можем выполнить проверку кода, чтобы найти
		уязвимости, что является частью того, что называется пентестингом
		Whitebox .
			
			https://en.wikipedia.org/wiki/White-box_testing

		С другой стороны, исходный код внутренних компонентов хранится на
		внутреннем сервере, поэтому по умолчанию у нас нет доступа к нему, что
		вынуждает нас выполнять только так называемое пентестирование Blackbox .
			
			https://en.wikipedia.org/wiki/Black-box_testing

		Однако, как мы увидим, некоторые веб-приложения имеют открытый исходный
		код, а это означает, что у нас, вероятно, есть доступ к их исходному
		коду. Кроме того, некоторые уязвимости, такие как включение локальных
		файлов
			
			https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion
				
		Могут позволить нам получить исходный код с внутреннего сервера. Имея
		этот исходный код, мы можем затем выполнить проверку кода серверных
		компонентов, чтобы лучше понять, как работает приложение, потенциально
		найти конфиденциальные данные в исходном коде (например, пароли) и даже
		найти уязвимости, которые были бы трудными или невозможными. найти без
		доступа к исходному коду.

		The top 20Наиболее распространенные ошибки веб-разработчиков, которые
		важны для нас как пентестеров:
			
			1. 		Разрешение на ввод неверных данных в базу данных
			2. 		Ориентация на систему в целом
			3. 		Создание лично разработанных методов безопасности
			4. 		Относитесь к безопасности как к своему последнему шагу
			5. 		Разработка хранилища паролей в виде простого текста
			6. 		Создание слабых паролей
			7. 		Хранение незашифрованных данных в базе данных
			8. 		Чрезмерная зависимость от клиентской стороны
			9. 		Быть слишком оптимистичным
			10. 	Разрешение переменных через имя пути URL
			11. 	Доверие стороннему коду
			12. 	Жестко запрограммированные бэкдор-аккаунты
			13. 	Непроверенные SQL-инъекции
			14. 	Удаленное включение файлов
			15. 	Небезопасная обработка данных
			16. 	Невозможно правильно зашифровать данные
			17. 	Не использовать безопасную криптографическую систему
			18. 	Игнорирование слоя 8
			19. 	Просмотрите действия пользователя
			20. 	Неправильные настройки брандмауэра веб-приложений


	
		Эти ошибки приводят к уязвимостям OWASP Top 10 для веб-приложений,
		которые мы обсудим в других модулях: 
			
			https://owasp.org/www-project-top-ten/

			1. 		Инъекция
			2. 		Сломанная аутентификация
			3. 		Раскрытие конфиденциальных данных
			4. 		Внешние объекты XML (XXE)
			5. 		Сломанный контроль доступа
			6. 		Неправильная конфигурация безопасности
			7. 		Межсайтовый скриптинг (XSS)
			8. 		Небезопасная десериализация
			9. 		Использование компонентов с известными уязвимостями
			10. 	Недостаточное ведение журнала и мониторинг


		* Важно начать знакомиться с этими недостатками и уязвимостями, поскольку
		они формируют основу для многих проблем, которые мы рассмотрим в будущих
		веб-модулях и даже модулях, не связанных с веб-разработкой. Как
		пентестеры, мы должны уметь грамотно выявлять, использовать и объяснять
		эти уязвимости для наших клиентов. 
